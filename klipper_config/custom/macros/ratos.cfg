# ToDo
# if only extruder0 is used default toolhead doesnt get preheated

[gcode_macro START_PRINT]
description: Start print procedure, use this in your Slicer.
gcode:
  # get ratos settings
  {% set toolhead_default = printer["gcode_macro RatOS"].toolhead_default|default(1)|int %}
  {% set z_probe_stowable = printer["gcode_macro RatOS"].z_probe|lower == 'stowable' %}
  {% set force_absolute_position = printer["gcode_macro RatOS"].force_absolute_position|lower == 'true' %}
  {% set start_print_heat_chamber_bed_temp = printer["gcode_macro RatOS"].start_print_heat_chamber_bed_temp|default(0.0)|float %}

  # get macro parameters
  {% set t = params.INITIAL_TOOL|default(toolhead_default)|int %}
  {% set chamber_temp = params.CHAMBER_TEMP|default(0.0)|float %}
  {% set bed_temp = params.BED_TEMP|default(printer.heater_bed.target, true)|float %}

  {% set extruder_temp = params.EXTRUDER_TEMP|default(0, true)|float %}
  {% set extruder_temp_1 = params.EXTRUDER_TEMP_1|default(0, true)|float %}
  {% set extruder_other_layer_temp = params.EXTRUDER_OTHER_LAYER_TEMP|default(0, true)|float %}
  {% set extruder_other_layer_temp_1 = params.EXTRUDER_OTHER_LAYER_TEMP_1|default(0, true)|float %}

  {% set both_toolheads = params.BOTH_TOOLHEADS|default(true)|lower %}

  # cache some values for the layer change macro
  {% if printer["dual_carriage"] is defined %}
    SET_GCODE_VARIABLE MACRO=_LAYER_CHANGE VARIABLE=layer_number VALUE=1
    SET_GCODE_VARIABLE MACRO=_LAYER_CHANGE VARIABLE=t VALUE={t}
    SET_GCODE_VARIABLE MACRO=_LAYER_CHANGE VARIABLE=all_toolheads VALUE={(1 if both_toolheads=='true' else 0)}
    SET_GCODE_VARIABLE MACRO=_LAYER_CHANGE VARIABLE=extruder_other_layer_temp VALUE={extruder_other_layer_temp}
    SET_GCODE_VARIABLE MACRO=_LAYER_CHANGE VARIABLE=extruder_other_layer_temp_1 VALUE={extruder_other_layer_temp_1}
  {% endif %}

  # IDEX mode
  {% set idex_mode = '' %}
  {% if printer["dual_carriage"] is defined %}
    {% set idex_mode = printer["dual_carriage"].carriage_1|lower %}
    IDEX_SINGLE
  {% endif %}

  # Multicolor prints in copy and mirror mode isnt possible, fall back to single mode
  {% if both_toolheads == 'true' and (idex_mode == "copy" or idex_mode == "mirror") %}
    {% set idex_mode = '' %}
  {% endif %}

  # set fan mode 
  SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=toolhead_sync_fans VALUE=False
  {% if printer["dual_carriage"] is defined %}
    {% if idex_mode == "copy" or idex_mode == "mirror" %}
      {% set both_toolheads = 'true' %}
      SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=toolhead_sync_fans VALUE=True
    {% endif %}
  {% endif %}

  # start 
  CLEAR_PAUSE                                     # clear pause state
  {% if force_absolute_position == true %}
    G90                                           # Absolute positioning
  {% endif %}
  SAVE_GCODE_STATE NAME=start_print_state         # save gcode state
  G21                                             # Metric values
  G90                                             # Absolute positioning 
  M82                                             # Set extruder to absolute mode

  # handle stowable probe
  {% if z_probe_stowable == true %}
    STOWABLE_PROBE_BEGIN_BATCH
  {% endif %}

  # homing 
  MAYBE_HOME                                      # home if needed
  {% if printer["dual_carriage"] is defined %}
    _PARK_TOOLHEAD                                # Park X
    {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
    {% set printable_y = [printer.toolhead.axis_minimum.y, printer.toolhead.axis_maximum.y] %}
    {% if printer["gcode_macro RatOS"].printable_y is defined %}
      {% set printable_y = printer["gcode_macro RatOS"].printable_y %}
    {% endif %}
    G0 Y{printable_y[1] - 5} F{speed}             # Park Y
  {% endif %}

  # heating chamber
  {% if chamber_temp > 0 %}
    _START_PRINT_HEAT_CHAMBER CHAMBER_TEMP={chamber_temp} BED_TEMP={start_print_heat_chamber_bed_temp}
    _USER_START_PRINT_HEAT_CHAMBER CHAMBER_TEMP={chamber_temp} BED_TEMP={start_print_heat_chamber_bed_temp}
  {% endif %}

  # Wait for bed to heat up
  M117 Heating bed...                             # display output
  RESPOND MSG="Heating bed..."                    # response
  M190 S{bed_temp}                                # set bed temperature and wait for it

	# Run the user created "AFTER_HEATING_BED" macro
	_USER_START_PRINT_AFTER_HEATING_BED 
	# Run the customizable "AFTER_HEATING_BED" macro.
	_START_PRINT_AFTER_HEATING_BED T={t} ALL_EXTRUDER={both_toolheads}
	# Run the user created "START_PRINT_BED_MESH" macro
	_USER_START_PRINT_BED_MESH
	# Run the customizable "BED_MESH" macro
	_START_PRINT_BED_MESH X0={params.X0} X1={params.X1} Y0={params.Y0} Y1={params.Y1} T={t} ALL_EXTRUDER={both_toolheads} IDEX_MODE={idex_mode}
  # handle stowable probe
  {% if z_probe_stowable == true %}
    STOWABLE_PROBE_END_BATCH
  {% endif %}

	# cool down the preheated probing toolhead if not needed for printing
  {% if printer["dual_carriage"] is defined %}
    {% if both_toolheads!='true' %}
      {% if t!=toolhead_default %}
        M104 S{0} T{toolhead_default}
      {% endif %}
    {% endif %}
  {% endif %}

	# Start heating extruder
  {% if printer["dual_carriage"] is defined %}
    {% if t==0 or both_toolheads=='true' %}
      M104 S{extruder_temp|default(printer.extruder.target, true)} T0
    {% endif %}
    {% if t==1 or both_toolheads=='true' %}
      M104 S{extruder_temp_1|default(printer.extruder1.target, true)} T1
    {% endif %}
  {% else %}
    M104 S{extruder_temp|default(printer.extruder.target, true)}
  {% endif %}

	# Run the users "PARK" macro
	_USER_START_PRINT_PARK
	# Run the customizable "PARK" macro
	_START_PRINT_PARK

  # Wait for extruder to heat up
  M117 Heating Extruder...                        # display output
  RESPOND MSG="Heating Extruder..."               # response
  {% if printer["dual_carriage"] is defined %}
    {% if t==0 or both_toolheads=='true' %}
      M109 S{extruder_temp|default(printer.extruder.target, true) } T0
    {% endif %}
    {% if t==1 or both_toolheads=='true' %}
      M109 S{extruder_temp_1|default(printer.extruder1.target, true) } T1
    {% endif %}
  {% else %}
    M109 S{extruder_temp|default(printer.extruder.target, true) }
  {% endif %}

	# Run the user created "AFTER_HEATING_EXTRUDER" macro.
	_USER_START_PRINT_AFTER_HEATING_EXTRUDER

	# Run the customizable "AFTER_HEATING_EXTRUDER" macro.
  {% if printer["dual_carriage"] is defined %}
    _START_PRINT_AFTER_HEATING_EXTRUDER T={t} ALL_EXTRUDER={both_toolheads}
  {% else %}
    _START_PRINT_AFTER_HEATING_EXTRUDER
  {% endif %}

  # reset offset needed bc of the following RESTORE_GCODE_STATE
  {% if printer["dual_carriage"] is defined %}
    {% set svv = printer.save_variables.variables %}
    SAVE_VARIABLE VARIABLE=applied_offset VALUE={toolhead_default}
  {% endif %}

  # start printing
  M117 Printing...                                # display output
  RESPOND MSG="Printing..."                       # response
  RESTORE_GCODE_STATE NAME=start_print_state      # restore gcode state

  # select the initial toolhead 
  {% if printer["dual_carriage"] is defined %}
    {% if idex_mode != "copy" and idex_mode != "mirror" %}
      T{t} O1        
      _SET_OFFSET T={t}
    {% endif %}
  {% endif %}

  # restore IDEX mode
  {% if printer["dual_carriage"] is defined %}
    {% if idex_mode == "copy" %}
      IDEX_COPY
    {% elif idex_mode == "mirror" %}
      IDEX_MIRROR
    {% endif %}
  {% endif %}

	# Set extrusion mode based on user configuration
  {% if printer["gcode_macro RatOS"].relative_extrusion|lower == 'true' %}
      M83
  {% else %}
      M82
  {% endif %}

  # reset extrusion distance
  G92 E0                                          


# The end_print macro is also called from CANCEL_PRINT.
[gcode_macro END_PRINT]
description: End print procedure, use this in your Slicer.
gcode:
  SAVE_GCODE_STATE NAME=end_print_state
	_USER_END_PRINT_BEFORE_HEATERS_OFF
	_END_PRINT_BEFORE_HEATERS_OFF
	TURN_OFF_HEATERS
	_USER_END_PRINT_AFTER_HEATERS_OFF
	_END_PRINT_AFTER_HEATERS_OFF
	_USER_END_PRINT_PARK
	_END_PRINT_PARK
  # Clear skew profile if any was loaded.
  {% if printer["gcode_macro RatOS"].skew_profile is defined %}
    SET_SKEW CLEAR=1
  {% endif %}
  # Part cooling fan off
  M107
  RESTORE_GCODE_STATE NAME=end_print_state
  # reset the applied offset to the default hotend one
  _SET_OFFSET T={printer["gcode_macro RatOS"].toolhead_default|default(1)|int}
  # Steppers off
  M84
	# Clear bed mesh so that G28 doesn't fail.
	BED_MESH_CLEAR
  M117 Done :)
  RESPOND MSG="Done :)"


[gcode_macro RESUME]
description: Resumes the print if the printer is paused.
rename_existing: RESUME_BASE
gcode:
  # check if current extruder can extrude
  {% set can_extrude = printer[extruder].can_extrude|lower %}
  {% if printer.toolhead.extruder == 'extruder1' %}
    {% set can_extrude = printer['extruder1'].can_extrude|lower %}
  {% endif %}

  # Prime
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  {% if can_extrude == 'true' %}
    G91
    G1 E{E} F2100
    G90
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED={printer["gcode_macro RatOS"].macro_travel_speed|float}
  RESUME_BASE


[gcode_macro _PARK]
gcode:
  # ratos config 
  {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
  {% set printable_x = [printer.toolhead.axis_minimum.x, printer.toolhead.axis_maximum.x] %}
	{% if printer["gcode_macro RatOS"].printable_x is defined %}
    {% set printable_x = printer["gcode_macro RatOS"].printable_x %}
	{% endif %}
  {% set printable_y = [printer.toolhead.axis_minimum.y, printer.toolhead.axis_maximum.y] %}
	{% if printer["gcode_macro RatOS"].printable_y is defined %}
    {% set printable_y = printer["gcode_macro RatOS"].printable_y %}
	{% endif %}

  # Get X position
  {% if params.X != '' %}
    {% if params.X|float >= printable_x[0] + 5 and params.X|float <= printable_x[1] - 5 %}
      {% set safe_x = params.X|float %}
    {% else %}
      {action_respond_info('The requested X co-ordinate is outside the defined axis bounds - using defaults')}
      {% set safe_x = printable_x[0] + ((printable_x[1] - printable_x[0]) / 2) %}
    {% endif %}
  {% else %}
    {% set safe_x = printable_x[0] + ((printable_x[1] - printable_x[0]) / 2) %}
  {% endif %}

  # Get Y position
  {% if params.LOCATION|default('back')|lower == 'back' %}
    {% set y = printable_y[1] - 5 %}
  {% elif params.LOCATION|lower == 'front' %}
    {% set y = printable_y[0] + 5 %}
  {% elif params.LOCATION|lower == 'center' %}
    {% set y = printable_y[0] + ((printable_y[1] - printable_y[0]) / 2) %}
  {% endif %}

  # Absolute positioning
  G90 
  # Park
  G0 X{safe_x} Y{y} F{speed} 


[gcode_macro SET_CENTER_KINEMATIC_POSITION]
description: FOR DEBUGGING PURPOSES ONLY. Sets the internal printer kinematic state to the center of all axes regardless of actual physical position.
gcode:
  # ratos config 
  {% set printable_x = [printer.toolhead.axis_minimum.x, printer.toolhead.axis_maximum.x] %}
	{% if printer["gcode_macro RatOS"].printable_x is defined %}
    {% set printable_x = printer["gcode_macro RatOS"].printable_x %}
	{% endif %}
  {% set printable_y = [printer.toolhead.axis_minimum.y, printer.toolhead.axis_maximum.y] %}
	{% if printer["gcode_macro RatOS"].printable_y is defined %}
    {% set printable_y = printer["gcode_macro RatOS"].printable_y %}
	{% endif %}

  RESPOND MSG="WARNING: ONLY USE SET_CENTER_KINEMATIC_POSITION FOR DEBUGGING PURPOSES. YOU'RE OVERRIDING THE INTERNAL POSITIONING STATE OF THE PRINTER. PROCEED WITH CAUTION AND DO A PROPER G28 WHEN DONE."
  SET_GCODE_VARIABLE MACRO=MAYBE_HOME VARIABLE=is_kinematic_position_overriden VALUE=True
  SET_KINEMATIC_POSITION X={(printable_x[0] + ((printable_x[1] - printable_x[0]) / 2))} Y={(printable_y[0] + ((printable_y[1] - printable_y[0]) / 2))} Z={printer.toolhead.axis_maximum.z / 2}


[gcode_macro _START_PRINT_AFTER_HEATING_BED]
gcode:
	{% if printer["gcode_macro RatOS"].preheat_extruder|lower == 'true' %}
    {% set t = params.T|default(-1)|int %}
    {% set all_extruder = params.ALL_EXTRUDER|default('') %}
    {% set min_temp = printer["gcode_macro RatOS"].preheat_extruder_temp|float %}
    {% set max_temp = printer["gcode_macro RatOS"].preheat_extruder_temp|float + 5 %}
    {% set toolhead_default = printer["gcode_macro RatOS"].toolhead_default|default(1)|int %}
		M117 Pre-heating extruder...
		RESPOND MSG="Pre-heating extruder..."
		# Wait for extruder to reach a predefined preheat temp so an inductive probe (if present) is at a predictable temp. 
		# Also allows the bed heat to spread a little, and softens any plastic that might be stuck to the nozzle.
    {% if printer["dual_carriage"] is defined %}
      {% if t==0 or toolhead_default==0 or all_extruder=='true' %}
        M104 S{min_temp} T0
      {% endif %}
      {% if t==1 or toolhead_default==1 or all_extruder=='true' %}
        M104 S{min_temp} T1
      {% endif %}
      {% if t==0 or toolhead_default==0 or all_extruder=='true' %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={min_temp} MAXIMUM={max_temp}
      {% endif %}
      {% if t==1 or toolhead_default==1 or all_extruder=='true' %}
        TEMPERATURE_WAIT SENSOR=extruder1 MINIMUM={min_temp} MAXIMUM={max_temp}
      {% endif %}
    {% else %}
      M104 S{min_temp}
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={min_temp} MAXIMUM={max_temp}
    {% endif %}
	{% endif %}
  M117 Adjusting Z tilt...
  RESPOND MSG="Adjusting Z tilt..."
  # Adjust bed tilt
  Z_TILT_ADJUST
  M117 Rehoming Z after Z tilt adjustment...
  RESPOND MSG="Rehoming Z after Z tilt adjustment..."
  # Home again as Z will have changed after tilt adjustment and bed heating.
  G28 Z


[gcode_macro _START_PRINT_AFTER_HEATING_EXTRUDER]
gcode:
  {% if printer["dual_carriage"] is defined %}
    {% set t = params.T|default(printer["gcode_macro RatOS"].toolhead_default|default(1)|int)|int %}
    {% set all_extruder = params.ALL_EXTRUDER|default('true') %}
    {% if t==0 or all_extruder=='true' %}
      T{t} O1
      _SET_START_PRINT_AFTER_HEATING_EXTRUDER T={t} ALL_EXTRUDER={all_extruder}
    {% endif %}
    {% if t==1 or all_extruder=='true' %}
      T{t} O1
      _SET_START_PRINT_AFTER_HEATING_EXTRUDER T={t} ALL_EXTRUDER={all_extruder}
    {% endif %}
  {% else %}
    _SET_START_PRINT_AFTER_HEATING_EXTRUDER
  {% endif %}
  {% if printer["gcode_macro RatOS"].skew_profile is defined %}
    SKEW_PROFILE LOAD={printer["gcode_macro RatOS"].skew_profile}
  {% endif %}


[gcode_macro _SET_START_PRINT_AFTER_HEATING_EXTRUDER]
gcode:
  {% set has_offset = printer["gcode_macro RatOS"].probe_for_priming_result|float(9999.9) != 9999.9 %}
  {% if printer["dual_carriage"] is defined and printer.toolhead.extruder == 'extruder1' %}
    {% set has_offset = printer["gcode_macro RatOS"].probe_for_priming_result_b|float(9999.9) != 9999.9 %}
  {% endif %}
  {% if has_offset %}
    ADD_PRIME_PROBE_TO_OFFSET 
  {% endif %}
	{% if printer["gcode_macro RatOS"].nozzle_priming|lower == 'primeline' %}
		PRIME_LINE T={params.T|default(-1)} ALL_EXTRUDER={params.ALL_EXTRUDER|default('false')}
	{% endif %}
	{% if printer["gcode_macro RatOS"].nozzle_priming|lower == 'primeblob' %}
		PRIME_BLOB T={params.T|default(-1)} ALL_EXTRUDER={params.ALL_EXTRUDER|default('false')}
	{% endif %}
  {% if has_offset %}
    SUBTRACT_PRIME_PROBE_FROM_OFFSET
  {% endif %}


[gcode_macro _START_PRINT_BED_MESH]
gcode:
	{% set default_profile = printer["gcode_macro RatOS"].bed_mesh_profile|default('ratos') %}
	{% if printer["gcode_macro RatOS"].calibrate_bed_mesh|lower == 'true' %}
		BED_MESH_CLEAR
		{% if printer["gcode_macro RatOS"].adaptive_mesh|lower == 'true' %}
      {% if params.IDEX_MODE|default('') != "copy" and params.IDEX_MODE|default('') != "mirror" %}
        CALIBRATE_ADAPTIVE_MESH PROFILE={default_profile} X0={params.X0} X1={params.X1} Y0={params.Y0} Y1={params.Y1} T={params.T} ALL_EXTRUDER={params.ALL_EXTRUDER|default('false')}
      {% else %}
        BED_MESH_CALIBRATE PROFILE={default_profile}
      {% endif %}
		{% else %}
			BED_MESH_CALIBRATE PROFILE={default_profile}
		{% endif %}
		BED_MESH_PROFILE LOAD={default_profile}
	{% elif printer["gcode_macro RatOS"].bed_mesh_profile is defined %}
		BED_MESH_CLEAR
		BED_MESH_PROFILE LOAD={printer["gcode_macro RatOS"].bed_mesh_profile}
	{% endif %}


#####
# MESH MACROS
####

[gcode_macro PROBE_FOR_PRIMING]
gcode:
	{% if printer["gcode_macro RatOS"].nozzle_priming|lower != 'false' %}
		SAVE_GCODE_STATE NAME=probe_for_priming_state
		RESPOND MSG="Probing the prime location.."
		{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
		{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
    {% set printable_x = [printer.toolhead.axis_minimum.x, printer.toolhead.axis_maximum.x] %}
    {% if printer["gcode_macro RatOS"].printable_x is defined %}
      {% set printable_x = printer["gcode_macro RatOS"].printable_x %}
    {% endif %}
    {% set printable_y = [printer.toolhead.axis_minimum.y, printer.toolhead.axis_maximum.y] %}
    {% if printer["gcode_macro RatOS"].printable_y is defined %}
      {% set printable_y = printer["gcode_macro RatOS"].printable_y %}
    {% endif %}
    {% if params.TOOLHEAD is defined %}
      {% if params.TOOLHEAD|default(toolhead_default)|int == 0 %}
        {% set x_start = printable_x[0] + 5 %}
      {% else %}
        {% set x_start = printable_x[1] - 5 %}
      {% endif %}
      {% if printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'min' %}
        {% set y_start = printable_y[0] + 5 %}
      {% elif printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'max' %}
        {% set y_start = printable_y[1] - 5 %}
      {% endif %}
    {% else %}
      {% if printer["gcode_macro RatOS"].nozzle_prime_start_x|lower == 'min' %}
        {% set x_start = 5 %}
      {% elif printer["gcode_macro RatOS"].nozzle_prime_start_x|lower == 'max' %}
        {% set x_start = printable_x[1] - 5 %}
      {% else %}
        {% set x_start = printer["gcode_macro RatOS"].nozzle_prime_start_x|float %}
      {% endif %}
      {% if printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'min' %}
        {% set y_start = 5 %}
      {% elif printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'max' %}
        {% set y_start = printable_y[1] - 5 %}
      {% else %}
        {% set y_start = printer["gcode_macro RatOS"].nozzle_prime_start_y|float %}
      {% endif %}
    {% endif %}
		{% set z = printer.configfile.settings.bed_mesh.horizontal_move_z|float %}

		# get bed mesh config object
		{% set mesh_config = printer.configfile.config.bed_mesh %}

		# Get probe offsets
		{% if printer.configfile.settings.bltouch is defined %}
			{% set x_offset = printer.configfile.settings.bltouch.x_offset|float %}
			{% set y_offset = printer.configfile.settings.bltouch.y_offset|float %}
		{% elif printer.configfile.settings.probe is defined %}
			{% set x_offset = printer.configfile.settings.probe.x_offset|float %}
			{% set y_offset = printer.configfile.settings.probe.y_offset|float %}
		{% elif printer.configfile.settings.beacon is defined %}
			{% set x_offset = printer.configfile.settings.beacon.x_offset|float %}
			{% set y_offset = printer.configfile.settings.beacon.y_offset|float %}
		{% else %}
			{ action_raise_error("No probe or bltouch section found. Adaptive priming only works with [probe] or [bltouch].") }
		{% endif %}

		# get configured bed mesh area
		{% set min_x = mesh_config.mesh_min.split(",")[0]|float - x_offset %}
		{% set min_y = mesh_config.mesh_min.split(",")[1]|float - y_offset %}
		{% set max_x = mesh_config.mesh_max.split(",")[0]|float - x_offset %}
		{% set max_y = mesh_config.mesh_max.split(",")[1]|float - y_offset %}

		# make sure probe coordinates lie within the configured mesh area
		{% set x_start = [[x_start, max_x]|min, min_x]|max %}
		{% set y_start = [[y_start, max_y]|min, min_y]|max %}

		RESPOND MSG="PROBE_FOR_PRIMING: Probing the prime location at X: {x_start} Y: {y_start}"

		# Absolute positioning
		G90 
		# Relative extrusion
		M83
		# Lift to horizontal_move_z
		G0 Z{z} F{z_speed}
		# move close to blob position
		G1 X{x_start} Y{y_start} F{speed}
		PROBE_CURRENT_POSITION

    {% if params.TOOLHEAD is defined %}
      {% if params.TOOLHEAD|default(toolhead_default)|int == 0 %}
        SAVE_PROBE_RESULT VARIABLE=probe_for_priming_result
      {% else %}
        SAVE_PROBE_RESULT VARIABLE=probe_for_priming_result_b
      {% endif %}
    {% else %}
      SAVE_PROBE_RESULT VARIABLE=probe_for_priming_result
    {% endif %}

		RESTORE_GCODE_STATE NAME=probe_for_priming_state
	{% endif %}


[gcode_macro RESET_PRIME_PROBE_STATE]
gcode:
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=probe_for_priming_result VALUE=None
  {% if printer["dual_carriage"] is defined %}
    SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=probe_for_priming_result_b VALUE=None
  {% endif %}


[gcode_macro ADD_PRIME_PROBE_TO_OFFSET]
gcode:
	{% set last_z = printer["gcode_macro RatOS"].probe_for_priming_result|float(9999.9) %}
  {% set idex_toolhead_z_offset = 0.0 %}
  {% if printer["dual_carriage"] is defined %}
    {% if printer.toolhead.extruder == 'extruder' %}
      {% set svv = printer.save_variables.variables %}
      {% set idex_toolhead_z_offset = svv.zoffset %}
    {% else %}
      {% set last_z = printer["gcode_macro RatOS"].probe_for_priming_result_b|float(9999.9) %}
    {% endif %}
  {% endif %}
	{% if printer.configfile.settings.bltouch is defined %}
		{% set z_offset = printer.configfile.settings.bltouch.z_offset|float %}
	{% elif printer.configfile.settings.probe is defined %}
		{% set z_offset = printer.configfile.settings.probe.z_offset|float %}
	{% else %}
		{ action_raise_error("No probe or bltouch section found. Adaptive priming only works with [probe] or [bltouch].") }
	{% endif %}
  {% set z_offset = z_offset + idex_toolhead_z_offset %}
	{% if last_z == 9999.9 %}
		{ action_raise_error("No probe result found for prime area. This is likely a bug.") }
	{% endif %}
	{% set adjustment = last_z - z_offset %}
	{% set adjustment_threshold = printer["gcode_macro RatOS"].adaptive_prime_offset_threshold|float %}
	{% if adjustment < adjustment_threshold %}
		{ action_raise_error("Abnormal probe offset detected. Needed offset of {adjustment} is below the offset threshold of -1mm. Please verify the probe is over the bed when probing for priming. If it isn't, you should adjust you min/max bed_mesh settings so the probe is always over the print area.") }
	{% endif %}
	RESPOND MSG="ADD_PRIME_PROBE_TO_OFFSET: adjusting z offset by {adjustment}"
	SET_GCODE_OFFSET Z_ADJUST={adjustment} MOVE=1


[gcode_macro SUBTRACT_PRIME_PROBE_FROM_OFFSET]
gcode:
	{% set last_z = printer["gcode_macro RatOS"].probe_for_priming_result|float(9999.9) %}
  {% set idex_toolhead_z_offset = 0.0 %}
  {% if printer["dual_carriage"] is defined %}
    {% if printer.toolhead.extruder == 'extruder' %}
      {% set svv = printer.save_variables.variables %}
      {% set idex_toolhead_z_offset = svv.zoffset %}
    {% else %}
      {% set last_z = printer["gcode_macro RatOS"].probe_for_priming_result_b|float(9999.9) %}
    {% endif %}
  {% endif %}
	{% if printer.configfile.settings.bltouch is defined %}
		{% set z_offset = printer.configfile.settings.bltouch.z_offset|float %}
	{% elif printer.configfile.settings.probe is defined %}
		{% set z_offset = printer.configfile.settings.probe.z_offset|float %}
	{% else %}
		{ action_raise_error("No probe or bltouch section found. Adaptive priming only works with [probe] or [bltouch].") }
	{% endif %}
  {% set z_offset = z_offset + idex_toolhead_z_offset %}
	{% if last_z == 9999.9 %}
		{ action_raise_error("No probe result found for prime area. This is likely a bug.") }
	{% endif %}
	RESPOND MSG="SUBTRACT_PRIME_PROBE_FROM_OFFSET: adjusting z offset by {z_offset - last_z}"
	SET_GCODE_OFFSET Z_ADJUST={z_offset - last_z} MOVE=1


[gcode_macro CALIBRATE_ADAPTIVE_MESH]
gcode:
	# get default mesh profile
	{% set default_profile = params.PROFILE %}

	# coordinates from the slicer start gcode
	{% set x0 = params.X0|default(-1)|float %}
	{% set y0 = params.Y0|default(-1)|float %}
	{% set x1 = params.X1|default(-1)|float %}
	{% set y1 = params.Y1|default(-1)|float %}
	RESPOND MSG="CALIBRATE_ADAPTIVE_MESH: Recieved coordinates X0={x0} Y0={y0} X1={x1} Y1={y1}"

	{% if x0 >= x1 or y0 >= y1 %}
		# coordinates are invalid, fall back to full bed mesh
		RESPOND MSG="CALIBRATE_ADAPTIVE_MESH: Invalid coordinates received. Please check your slicer settings. Falling back to full bed mesh."
		BED_MESH_CALIBRATE PROFILE={default_profile} 
	{% else %}
		# get bed mesh config object
		{% set mesh_config = printer.configfile.config.bed_mesh %}

		# get configured bed mesh area
		{% set min_x = mesh_config.mesh_min.split(",")[0]|float %}
		{% set min_y = mesh_config.mesh_min.split(",")[1]|float %}
		{% set max_x = mesh_config.mesh_max.split(",")[0]|float %}
		{% set max_y = mesh_config.mesh_max.split(",")[1]|float %}

		# make sure mesh coordinates lie within the configured mesh area
		{% set mesh_x0 = [[x0, max_x]|min, min_x]|max %}
		{% set mesh_y0 = [[y0, max_y]|min, min_y]|max %}
		{% set mesh_x1 = [[x1, max_x]|min, min_x]|max %}
		{% set mesh_y1 = [[y1, max_y]|min, min_y]|max %}

		{% if mesh_x0 == min_x and mesh_y0 == min_y and mesh_x1 == max_x and mesh_y1 == max_y %}
			# coordinates are invalid, fall back to full bed mesh
			RESPOND MSG="CALIBRATE_ADAPTIVE_MESH: Print is using the full bed, falling back to full bed mesh."
			BED_MESH_CALIBRATE PROFILE={default_profile}
		{% else %}
			{% if printer["gcode_macro RatOS"].z_probe|lower == 'stowable' %}
				DEPLOY_PROBE
			{% endif %}
			# get configured probe count
			{% set probe_count_x = mesh_config.probe_count.split(",")[0]|int %}
			{% if mesh_config.probe_count.split(",")|length == 2 %}
					{% set probe_count_y = mesh_config.probe_count.split(",")[1]|int %}
			{% else %}
					{% set probe_count_y = mesh_config.probe_count.split(",")[0]|int %}
			{% endif %}

			# calculate mesh point resolution
			{% set probe_x_step = (max_x - min_x) / probe_count_x %}
			{% set probe_y_step = (max_y - min_y) / probe_count_y %}

			# calculate xy probe count
			{% set mesh_count_x = ([(mesh_x1 - mesh_x0) / probe_x_step, 3]|max)|int %}
			{% set mesh_count_y = ([(mesh_y1 - mesh_y0) / probe_y_step, 3]|max)|int %}
			{% set min_mesh_count = [mesh_count_x, mesh_count_y]|min %}
			{% set max_mesh_count = [mesh_count_x, mesh_count_y]|max %}

			# check algorithms
			{% set algorithm = mesh_config.algorithm %}
			{% if algorithm|lower == 'lagrange' and max_mesh_count > 6 %}
				RESPOND MSG="CALIBRATE_ADAPTIVE_MESH: cannot exceed a probe_count of 6 when using lagrange interpolation. Falling back to bicubic interpolation."
				{% set algorithm = 'bicubic' %}
			{% endif %}
			{% if algorithm|lower == 'bicubic' and min_mesh_count < 4 %}
				{% if max_mesh_count > 6 %}
					RESPOND MSG="CALIBRATE_ADAPTIVE_MESH: invalid probe_count option when using bicubic interpolation. Combination of 3 points on one axis with more than 6 on another is not permitted. Forcing minimum mesh count to be 4."
					{% set min_mesh_count = 4 %}
				{% else %}
					RESPOND MSG="CALIBRATE_ADAPTIVE_MESH: bicubic interpolation with a probe_count of less than 4 points detected. Forcing lagrange interpolation."
					{% set algorithm = 'lagrange' %}
				{% endif %}
			{% endif %}

			{% set mesh_count_x = ([min_mesh_count, mesh_count_x]|max)|int %}
			{% set mesh_count_x = ([max_mesh_count, mesh_count_x]|min)|int %}
			{% set mesh_count_y = ([min_mesh_count, mesh_count_y]|max)|int %}
			{% set mesh_count_y = ([max_mesh_count, mesh_count_y]|min)|int %}

			{% set should_prime = printer["gcode_macro RatOS"].nozzle_priming == 'primeline' or printer["gcode_macro RatOS"].nozzle_priming == 'primeblob' %}
			{% if printer.configfile.settings.beacon is defined %}
				RESPOND MSG="CALIBRATE_ADAPTIVE_MESH: adaptive priming is currently not supported for Beacon. Disabling priming.."
				SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=nozzle_priming VALUE=False
				{% set should_prime = False %}
			{% endif %}

			{% set prime_first = printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == "min" or printer["gcode_macro RatOS"].nozzle_prime_start_y|float(printer.toolhead.axis_maximum.y) < printer.toolhead.axis_maximum.y / 2 %}

			{% if should_prime and prime_first %}
        {% if printer["dual_carriage"] is defined and (idex_mode != "copy" and idex_mode != "mirror") %}
          {% if params.ALL_EXTRUDER|default('false') == 'true' %}
            PROBE_FOR_PRIMING TOOLHEAD=0
            PROBE_FOR_PRIMING TOOLHEAD=1
          {% else %}
            {% if params.T|int == 0 %}
              PROBE_FOR_PRIMING TOOLHEAD=0
            {% else %}
              PROBE_FOR_PRIMING TOOLHEAD=1
            {% endif %}
          {% endif %}
        {% else %}
          PROBE_FOR_PRIMING
        {% endif %}
			{% endif %}
			# mesh
			RESPOND MSG="CALIBRATE_ADAPTIVE_MESH: mesh coordinates X0={mesh_x0} Y0={mesh_y0} X1={mesh_x1} Y1={mesh_y1}"
			BED_MESH_CALIBRATE PROFILE={default_profile} algorithm={algorithm} mesh_min={mesh_x0},{mesh_y0} mesh_max={mesh_x1},{mesh_y1} probe_count={mesh_count_x},{mesh_count_y} relative_reference_index=-1
			
			{% if should_prime and not prime_first %}
        {% if printer["dual_carriage"] is defined and (idex_mode != "copy" and idex_mode != "mirror") %}
          {% if params.ALL_EXTRUDER|default('true') != 'false' %}
            PROBE_FOR_PRIMING TOOLHEAD=0
            PROBE_FOR_PRIMING TOOLHEAD=1
          {% else %}
            {% if params.T|int == 0 %}
              PROBE_FOR_PRIMING TOOLHEAD=0
            {% else %}
              PROBE_FOR_PRIMING TOOLHEAD=1
            {% endif %}
          {% endif %}
        {% else %}
          PROBE_FOR_PRIMING
        {% endif %}
			{% endif %}
			{% if printer["gcode_macro RatOS"].z_probe|lower == 'stowable' %}
				STOW_PROBE
			{% endif %}
			
		{% endif %}
	{% endif %}


# Macro to perform a modified z_tilt supporting stowable probes
[gcode_macro Z_TILT_ADJUST]
rename_existing: Z_TILT_ADJUST_ORIG
gcode:
  # reset IDEX mode
	{% if printer["dual_carriage"] is defined %}
		{% set idex_mode = printer["dual_carriage"].carriage_1|lower %}
    IDEX_SINGLE
	{% endif %}

  # Z-Zilt Adjust
  {% if printer["gcode_macro RatOS"].toolhead_default is defined %}
    T{printer["gcode_macro RatOS"].toolhead_default|int}
  {% endif %}
  {% if printer["gcode_macro RatOS"].z_probe == 'stowable' %}
    DEPLOY_PROBE
  {% endif %}
  Z_TILT_ADJUST_ORIG
  {% if printer["gcode_macro RatOS"].z_probe == 'stowable' %}
    STOW_PROBE
  {% endif %}

  # restore IDEX mode
	{% if printer["dual_carriage"] is defined %}
		{% if idex_mode == "copy" %}
			IDEX_COPY
		{% elif idex_mode == "mirror" %}
			IDEX_MIRROR
		{% endif %}
	{% endif %}


[gcode_macro _START_PRINT_PARK]
gcode:
  # ratos config 
	{% set z = printer["gcode_macro RatOS"].start_print_park_z_height|float %}
	{% set zSpeed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
  {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
  {% set printable_x = [printer.toolhead.axis_minimum.x, printer.toolhead.axis_maximum.x] %}
	{% if printer["gcode_macro RatOS"].printable_x is defined %}
    {% set printable_x = printer["gcode_macro RatOS"].printable_x %}
	{% endif %}
  {% set printable_y = [printer.toolhead.axis_minimum.y, printer.toolhead.axis_maximum.y] %}
	{% if printer["gcode_macro RatOS"].printable_y is defined %}
    {% set printable_y = printer["gcode_macro RatOS"].printable_y %}
	{% endif %}

	{% if printer["dual_carriage"] is defined %}
    # IDEX_SINGLE
    _PARK_TOOLHEAD
    G90                                 # Absolute positioning
    G0 Y{printable_y[1] - 5} F{speed}  # Park Y
	{% else %}
    _PARK LOCATION={printer["gcode_macro RatOS"].start_print_park_in} X={printer["gcode_macro RatOS"].start_print_park_x}
	{% endif %}
	G0 Z{z} F{zSpeed}


[gcode_macro _END_PRINT_PARK]
gcode:
	{% if printer["dual_carriage"] is defined %}
    # ratos config 
    {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
    {% set printable_x = [printer.toolhead.axis_minimum.x, printer.toolhead.axis_maximum.x] %}
    {% if printer["gcode_macro RatOS"].printable_x is defined %}
      {% set printable_x = printer["gcode_macro RatOS"].printable_x %}
    {% endif %}
    {% set printable_y = [printer.toolhead.axis_minimum.y, printer.toolhead.axis_maximum.y] %}
    {% if printer["gcode_macro RatOS"].printable_y is defined %}
      {% set printable_y = printer["gcode_macro RatOS"].printable_y %}
    {% endif %}
    IDEX_SINGLE
    _PARK_TOOLHEAD
    G90                                 # Absolute positioning
    G0 Y{printable_y[1] - 5} F{speed}  # Park Y
	{% else %}
    _PARK LOCATION={printer["gcode_macro RatOS"].end_print_park_in} X={printer["gcode_macro RatOS"].end_print_park_x}
	{% endif %}


#####
# FILAMENT MACROS
####

[gcode_macro LOAD_FILAMENT]
description: Loads new filament. Note: be careful with PETG, make sure you inspect the tip of your filament before loading to avoid jams.
gcode:
	SAVE_GCODE_STATE NAME=load_state
	G91
  {% set temp = params.TEMP|default(220)|int %}
  M117 Heating...
  # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
	{% if printer["dual_carriage"] is defined %}
    {% if params.T is defined %}
      {% set t = params.T|default(-1)|int %}
      {% if t>=0 and t<=printer["gcode_macro RatOS"].toolhead_count|int %}
        {% if t==0 %}
          M104 S{temp} T0
          TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp}
        {% endif %}
        {% if t==1 %}
          M104 S{temp} T1
          TEMPERATURE_WAIT SENSOR=extruder1 MINIMUM={temp}
        {% endif %}
        _LOAD_FILAMENT
      {% else %}
        RESPOND MSG="Please select correct extruder!"
      {% endif %}
    {% else %}
      RESPOND MSG="Please select extruder!"
    {% endif %}
  {% else %}
		M104 S{temp}
		TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp}
    _LOAD_FILAMENT
  {% endif %}
	RESTORE_GCODE_STATE NAME=load_state


[gcode_macro _LOAD_FILAMENT]
gcode:
  {% set load_speed = printer["gcode_macro RatOS"].filament_load_speed|float * 60 %}
  {% set load_length = printer["gcode_macro RatOS"].filament_load_length|float %}
  M117 Loading filament...
  # Load the filament into the hotend area.
  G0 E{load_length} F{load_speed}
  # Wait a secod
  G4 P1000
  # Purge
  G0 E40 F100
  # Wait for purge to complete
  M400
  M117 Filament loaded!
  RESPOND MSG="Filament loaded!"


[gcode_macro UNLOAD_FILAMENT]
description: Unloads the filament. Note: be careful with PETG, make sure you inspect the tip of your filament before reloading to avoid jams.
gcode:
	SAVE_GCODE_STATE NAME=unload_state
	G91
  {% set temp = params.TEMP|default(220)|int %}
  M117 Heating...
  # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
	{% if printer["dual_carriage"] is defined %}
    {% if params.T is defined %}
      {% set t = params.T|default(-1)|int %}
      {% if t>=0 and t<=printer["gcode_macro RatOS"].toolhead_count|int %}
        {% if t==0 %}
          M104 S{temp} T0
          TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp}
        {% endif %}
        {% if t==1 %}
          M104 S{temp} T1
          TEMPERATURE_WAIT SENSOR=extruder1 MINIMUM={temp}
        {% endif %}
        _UNLOAD_FILAMENT
      {% else %}
        RESPOND MSG="Please select correct extruder!"
      {% endif %}
    {% else %}
      RESPOND MSG="Please select extruder!"
    {% endif %}
  {% else %}
		M104 S{temp}
		TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp}
    _UNLOAD_FILAMENT
  {% endif %}
	RESTORE_GCODE_STATE NAME=unload_state


[gcode_macro _UNLOAD_FILAMENT]
gcode:
	{% set unload_speed = printer["gcode_macro RatOS"].filament_unload_speed|float * 60 %}
	{% set unload_length = printer["gcode_macro RatOS"].filament_unload_length|float %}
	M117 Unloading filament...
	# Extrude a bit
	G0 E10 F300
	# Extract filament to cold end area 
	G0 E-5 F3600
	# Wait for three seconds
	G4 P3000
	# Push back the filament to smash any stringing 
	G0 E5 F3600
	# Extract back fast in to the cold zone 
	G0 E-15 F3600
	# Continue extraction slowly, allow the filament time to cool solid before it reaches the gears       
	G0 E-{unload_length} F{unload_speed}
	M117 Filament unloaded!
	RESPOND MSG="Filament unloaded! Please inspect the tip of the filament before reloading."


#####
# PRIME MACROS
####

[gcode_macro PRIME_BLOB]
description: Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.
gcode:
  M118 PRIME_BLOB
	SAVE_GCODE_STATE NAME=prime_blob_state
	M117 Priming nozzle with prime blob..
	RESPOND MSG="Priming nozzle with prime blob.."
	{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
  {% set printable_x = [printer.toolhead.axis_minimum.x, printer.toolhead.axis_maximum.x] %}
	{% if printer["gcode_macro RatOS"].printable_x is defined %}
    {% set printable_x = printer["gcode_macro RatOS"].printable_x %}
	{% endif %}
  {% set printable_y = [printer.toolhead.axis_minimum.y, printer.toolhead.axis_maximum.y] %}
	{% if printer["gcode_macro RatOS"].printable_y is defined %}
    {% set printable_y = printer["gcode_macro RatOS"].printable_y %}
	{% endif %}
  {% if printer["dual_carriage"] is defined %}
    {% set y_factor = 0 %}
    {% if printer.toolhead.extruder == 'extruder' %}
      {% set x_start = printable_x[0] + 5 %}
      {% set x_factor = 1 %}
    {% else %}
      {% set x_start = printable_x[1] - 5 %}
      {% set x_factor = -1 %}
    {% endif %}
    {% if printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'min' %}
      {% set y_start = printable_y[0] + 5 %}
    {% elif printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'max' %}
      {% set y_start = printable_y[1] - 5 %}
    {% endif %}
    {% set z = 10 %}
  {% else %}
    {% set x_factor = 0 %}
    {% if printer["gcode_macro RatOS"].nozzle_prime_start_x|lower == 'min' %}
      {% set x_start = 5 %}
    {% elif printer["gcode_macro RatOS"].nozzle_prime_start_x|lower == 'max' %}
      {% set x_start = printable_x[1] - 5 %}
    {% else %}
      {% set x_start = printer["gcode_macro RatOS"].nozzle_prime_start_x|float %}
    {% endif %}
    {% if printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'min' %}
      {% set y_start = 5 %}
      {% set y_factor = 1 %}
    {% elif printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'max' %}
      {% set y_start = printable_y[1] - 5 %}
      {% set y_factor = -1 %}
    {% else %}
      {% set y_start = printer["gcode_macro RatOS"].nozzle_prime_start_y|float %}
      {% if printer["gcode_macro RatOS"].nozzle_prime_start_y|float < printable_y[1] / 2 %}
        {% set y_factor = 1 %}
      {% else %}
        {% set y_factor = -1 %}
      {% endif %}
    {% endif %}
    {% if printer["gcode_macro RatOS"].nozzle_prime_direction|lower == 'forwards' %}
      {% set y_factor = 1 %}
    {% elif printer["gcode_macro RatOS"].nozzle_prime_direction|lower == 'backwards' %}
      {% set y_factor = -1 %}
    {% endif %}
    {% set z = printer["gcode_macro RatOS"].start_print_park_z_height|float %}
  {% endif %}
	# Absolute positioning
	G90 
	# Relative extrusion
	M83
	# Lift to start print Z height
	G0 Z{z} F{z_speed}
	# move close to blob position along the edge of the bed
	G1 X{x_start} F{speed}
	G1 Y{y_start + (15 * y_factor)} F{speed}
	# Lower to blob extrusion height
	G1 Z0.5 F{z_speed}
	# Move to final position horizontally
	G1 Y{y_start} F{speed}
	# Extrude a blob
	G1 F60 E20
	# 40% fan
	M106 S102 P{params.T|default(-1)}
	# Move the extruder up by 5mm while extruding, breaks away from blob
	G1 Z5 F100 E5  
	# Move to wipe position, but keep extruding so the wipe is attached to blob
	G1 F200 X{x_start + (25 * x_factor)} Y{y_start + (25 * y_factor)} E1 
	# Go down diagonally while extruding
	# Broken down in z moves under 2mm as a workaround for a tuning tower test.
	# The tuning tower command thinks a new print has been started when z moves over 2mm and aborts.
	G1 F200 X{x_start + (30 * x_factor)} Y{y_start + (30 * y_factor)} Z3.8 E0.5
	G1 F200 X{x_start + (35 * x_factor)} Y{y_start + (35 * y_factor)} Z2.6 E0.5
	G1 F200 X{x_start + (40 * x_factor)} Y{y_start + (40 * y_factor)} Z1.4 E0.5
	G1 F200 X{x_start + (45 * x_factor)} Y{y_start + (45 * y_factor)} Z0.2 E0.5
	# 0% fan
	M106 S0
	# small wipe line
	G1 F200 X{x_start + (50 * x_factor)} Y{y_start + (50 * y_factor)} Z0.2 E0.6 
	# Break away wipe
	G1 F{speed} X{x_start + (100 * x_factor)} Y{y_start + (100 * y_factor)}
  # do not to hit or scratch the prime blob while the carriage moves to parking position
  {% if printer["dual_carriage"] is defined %}
    {% set idex_mode = printer["dual_carriage"].carriage_1|lower %}
    {% if idex_mode == "copy" or idex_mode == "mirror" or params.ALL_EXTRUDER|default('false') == 'true'%}
      G0 Z{z} F{z_speed}
    {% endif %}
  {% endif %}
	RESTORE_GCODE_STATE NAME=prime_blob_state


[gcode_macro PRIME_LINE]
description: Prints a primeline, used internally, if configured, as part of the START_PRINT macro.
gcode:
	SAVE_GCODE_STATE NAME=prime_line_state
	{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
  {% set printable_x = [printer.toolhead.axis_minimum.x, printer.toolhead.axis_maximum.x] %}
	{% if printer["gcode_macro RatOS"].printable_x is defined %}
    {% set printable_x = printer["gcode_macro RatOS"].printable_x %}
	{% endif %}
  {% set printable_y = [printer.toolhead.axis_minimum.y, printer.toolhead.axis_maximum.y] %}
	{% if printer["gcode_macro RatOS"].printable_y is defined %}
    {% set printable_y = printer["gcode_macro RatOS"].printable_y %}
	{% endif %}
  {% if printer["dual_carriage"] is defined %}
    {% set y_factor = 0 %}
    {% if printer.toolhead.extruder == 'extruder' %}
      {% set x_start = printable_x[0] + 5 %}
      {% set x_factor = 1 %}
    {% else %}
      {% set x_start = printable_x[1] - 5 %}
      {% set x_factor = -1 %}
    {% endif %}
    {% if printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'min' %}
      {% set y_start = printable_y[0] + 5 %}
    {% elif printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'max' %}
      {% set y_start = printable_y[1] - 5 %}
    {% endif %}
    {% set z = 10 %}
  {% else %}
    {% set x_factor = 0 %}
    {% if printer["gcode_macro RatOS"].nozzle_prime_start_x|lower == 'min' %}
      {% set x_start = 5 %}
    {% elif printer["gcode_macro RatOS"].nozzle_prime_start_x|lower == 'max' %}
      {% set x_start = printable_x[1] - 5 %}
    {% else %}
      {% set x_start = printer["gcode_macro RatOS"].nozzle_prime_start_x|float %}
    {% endif %}
    {% if printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'min' %}
      {% set y_start = 5 %}
      {% set y_factor = 1 %}
    {% elif printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'max' %}
      {% set y_start = printable_y[1] - 5 %}
      {% set y_factor = -1 %}
    {% else %}
      {% set y_start = printer["gcode_macro RatOS"].nozzle_prime_start_y|float %}
      {% if printer["gcode_macro RatOS"].nozzle_prime_start_y|float < printable_y[1] / 2 %}
        {% set y_factor = 1 %}
      {% else %}
        {% set y_factor = -1 %}
      {% endif %}
    {% endif %}
    {% if printer["gcode_macro RatOS"].nozzle_prime_direction|lower == 'forwards' %}
      {% set y_factor = 1 %}
    {% elif printer["gcode_macro RatOS"].nozzle_prime_direction|lower == 'backwards' %}
      {% set y_factor = -1 %}
    {% endif %}
    {% set z = printer["gcode_macro RatOS"].start_print_park_z_height|float %}
  {% endif %}
	# Absolute positioning
	G90 
	# Absolute extrusion
	M82
	M117 Priming nozzle with prime line..
	RESPOND MSG="Priming nozzle with prime line.."
	# Lift to start print Z height
	G0 Z{z} F{z_speed}
	# move to blob position along the edge of the bed
	G1 X{x_start} F{speed}
	G1 Y{y_start} F{speed}
	# Get ready to prime
	G1 Z0.3 F{z_speed}
	# Reset extrusion distance
	G92 E0
	# Prime nozzle 
	G1 X{x_start + (70 * x_factor)} Y{y_start + (70 * y_factor)} E16 F1200
	# Wipe
	G1 X{x_start + (90 * x_factor)} Y{y_start + (90 * y_factor)} F{speed}
  # do not to hit or scratch the prime line while the carriage moves to parking position
  {% if printer["dual_carriage"] is defined %}
    {% set idex_mode = printer["dual_carriage"].carriage_1|lower %}
    {% if idex_mode == "copy" or idex_mode == "mirror" or params.ALL_EXTRUDER|default('false') == 'true'%}
      G0 Z{z} F{z_speed}
    {% endif %}
  {% endif %}
	RESTORE_GCODE_STATE NAME=prime_line_state


#####
# IS MACROS
####
[gcode_macro GENERATE_SHAPER_GRAPHS]
description: Genarates input shaper resonances graphs for analysis. Uses the AXIS, TOOLHEAD, FREQUNECY_START and FREQUENCY_END parameter if you want to do specific measurements, (eg. GENERATE_SHAPER_GRAPHS AXIS=X TOOLHEAD=0 FREQUENCY_START=10 FREQUENCY_END=20)
gcode:
  {% set svv = printer.save_variables.variables %}
  {% set freq_start = params.FREQUENCY_START|default(10)|int %}
  {% set freq_end = params.FREQUENCY_END|default(133)|int %}
  {% set toolhead_parking_speed = printer["gcode_macro RatOS"].toolhead_parking_speed %}
  {% set toolhead_parking_acceleration = printer["gcode_macro RatOS"].toolhead_parking_acceleration %}
  {% set toolhead_shaper_adxl_chip = printer["gcode_macro RatOS"].toolhead_shaper_adxl_chip %}
  {% set printable_x = [printer.toolhead.axis_minimum.x, printer.toolhead.axis_maximum.x] %}
	{% if printer["gcode_macro RatOS"].printable_x is defined %}
    {% set printable_x = printer["gcode_macro RatOS"].printable_x %}
	{% endif %}
  {% set printable_y = [printer.toolhead.axis_minimum.y, printer.toolhead.axis_maximum.y] %}
	{% if printer["gcode_macro RatOS"].printable_y is defined %}
    {% set printable_y = printer["gcode_macro RatOS"].printable_y %}
	{% endif %}

  MAYBE_HOME
  G90

  {% set default_toolhead = printer["gcode_macro RatOS"].toolhead_default|default(1)|int %}
  SET_VELOCITY_LIMIT ACCEL={toolhead_parking_acceleration[default_toolhead]} ACCEL_TO_DECEL={(toolhead_parking_acceleration[default_toolhead]/2)}
  T{default_toolhead}

  {% set probe_point_x = printable_x[0] + ((printable_x[1] - printable_x[0]) / 2) %}

  {% set measure_t0 = true %}
  {% set measure_t1 = true %}
  {% if params.TOOLHEAD is defined %}
      {% if params.TOOLHEAD|lower == '0' %}
          {% set measure_t1 = false %}
      {% elif params.TOOLHEAD|lower == '1' %}
          {% set measure_t0 = false %}
      {% else %}
          {action_raise_error("Unknown toolhead specified. Expected 0 or 1.")}
      {% endif %}
  {% endif %}

  {% if params.AXIS is defined %}
      {% if params.AXIS|lower == 'x' %}
          {% if measure_t1 == true %}
              T1
              SET_VELOCITY_LIMIT ACCEL={toolhead_parking_acceleration[1]} ACCEL_TO_DECEL={(toolhead_parking_acceleration[1]/2)}
              G1 X{probe_point_x} F{(toolhead_parking_speed[1]*60)}
              TEST_RESONANCES AXIS=X CHIPS={toolhead_shaper_adxl_chip[1]} NAME=t1 FREQ_START={freq_start} FREQ_END={freq_end}
          {% endif %}
          {% if measure_t0 == true %}
              T0
              SET_VELOCITY_LIMIT ACCEL={toolhead_parking_acceleration[0]} ACCEL_TO_DECEL={(toolhead_parking_acceleration[0]/2)}
              G1 X{probe_point_x} F{(toolhead_parking_speed[0]*60)}
              TEST_RESONANCES AXIS=X CHIPS={toolhead_shaper_adxl_chip[0]} NAME=t0 FREQ_START={freq_start} FREQ_END={freq_end}
          {% endif %}
          G4 P5000
          {% if measure_t1 == true and measure_t0 == false %}
              RUN_SHELL_COMMAND CMD=generate_shaper_graphs PARAMS="x 1"
          {% elif measure_t1 == false and measure_t0 == true %}
              RUN_SHELL_COMMAND CMD=generate_shaper_graphs PARAMS="x 0"
          {% elif measure_t1 == true and measure_t0 == true %}
              RUN_SHELL_COMMAND CMD=generate_shaper_graphs PARAMS=x
          {% endif %}
          RESPOND MSG="Input shaper graph generated for the X axis. You'll find it in the input_shaper folder in the machine tab!"
      {% elif params.AXIS|lower == 'y' %}
          {% if measure_t1 == true %}
              T1
              SET_VELOCITY_LIMIT ACCEL={toolhead_parking_acceleration[1]} ACCEL_TO_DECEL={(toolhead_parking_acceleration[1]/2)}
              G1 X{probe_point_x} F{(toolhead_parking_speed[1]*60)}
              TEST_RESONANCES AXIS=Y CHIPS={toolhead_shaper_adxl_chip[1]} NAME=t1 FREQ_START={freq_start} FREQ_END={freq_end}
          {% endif %}
          {% if measure_t0 == true %}
              T0
              SET_VELOCITY_LIMIT ACCEL={toolhead_parking_acceleration[0]} ACCEL_TO_DECEL={(toolhead_parking_acceleration[0]/2)}
              G1 X{probe_point_x} F{(toolhead_parking_speed[0]*60)}
              TEST_RESONANCES AXIS=Y CHIPS={toolhead_shaper_adxl_chip[0]} NAME=t0 FREQ_START={freq_start} FREQ_END={freq_end}
          {% endif %}
          G4 P5000
          {% if measure_t1 == true and measure_t0 == false %}
              RUN_SHELL_COMMAND CMD=generate_shaper_graphs PARAMS="y 1"
          {% elif measure_t1 == false and measure_t0 == true %}
              RUN_SHELL_COMMAND CMD=generate_shaper_graphs PARAMS="y 0"
          {% elif measure_t1 == true and measure_t0 == true %}
              RUN_SHELL_COMMAND CMD=generate_shaper_graphs PARAMS=y
          {% endif %}
          RESPOND MSG="Input shaper graph generated for the Y axis. You'll find it in the input_shaper folder in the machine tab!"
      {% else %}
          {action_raise_error("Unknown axis specified. Expected X or Y.")}
      {% endif %}
  {% else %}
      {% if measure_t1 == true %}
          T1
          SET_VELOCITY_LIMIT ACCEL={toolhead_parking_acceleration[1]} ACCEL_TO_DECEL={(toolhead_parking_acceleration[1]/2)}
          G1 X{probe_point_x} F{(toolhead_parking_speed[1]*60)}
          TEST_RESONANCES AXIS=X CHIPS={toolhead_shaper_adxl_chip[1]} NAME=t1 FREQ_START={freq_start} FREQ_END={freq_end}
          TEST_RESONANCES AXIS=Y CHIPS={toolhead_shaper_adxl_chip[1]} NAME=t1 FREQ_START={freq_start} FREQ_END={freq_end}
      {% endif %}
      {% if measure_t0 == true %}
          T0
          SET_VELOCITY_LIMIT ACCEL={toolhead_parking_acceleration[0]} ACCEL_TO_DECEL={(toolhead_parking_acceleration[0]/2)}
          G1 X{probe_point_x} F{(toolhead_parking_speed[0]*60)}
          TEST_RESONANCES AXIS=X CHIPS={toolhead_shaper_adxl_chip[0]} NAME=t0 FREQ_START={freq_start} FREQ_END={freq_end}
          TEST_RESONANCES AXIS=Y CHIPS={toolhead_shaper_adxl_chip[0]} NAME=t0 FREQ_START={freq_start} FREQ_END={freq_end}
      {% endif %}
      G4 P5000
      {% if measure_t1 == true and measure_t0 == false %}
          RUN_SHELL_COMMAND CMD=generate_shaper_graphs PARAMS="x 1"
          RUN_SHELL_COMMAND CMD=generate_shaper_graphs PARAMS="y 1"
      {% elif measure_t1 == false and measure_t0 == true %}
          RUN_SHELL_COMMAND CMD=generate_shaper_graphs PARAMS="x 0"
          RUN_SHELL_COMMAND CMD=generate_shaper_graphs PARAMS="y 0"
      {% elif measure_t1 == true and measure_t0 == true %}
          RUN_SHELL_COMMAND CMD=generate_shaper_graphs PARAMS=x
          RUN_SHELL_COMMAND CMD=generate_shaper_graphs PARAMS=y
      {% endif %}
      RESPOND MSG="Input shaper graphs generated for X and Y. You'll find them in the input_shaper folder in the machine tab!"
  {% endif %}

  T1
  SET_VELOCITY_LIMIT ACCEL={toolhead_parking_acceleration[1]} ACCEL_TO_DECEL={(toolhead_parking_acceleration[1]/2)}
  G1 X{probe_point_x} F{(toolhead_parking_speed[1]*60)}
  SET_VELOCITY_LIMIT ACCEL={printer.toolhead.max_accel} ACCEL_TO_DECEL={(printer.toolhead.max_accel/2)}


[gcode_shell_command generate_shaper_graphs]
command: /home/pi/printer_data/config/custom/scripts/generate-shaper-graph.sh
timeout: 120.
verbose: True


[gcode_macro MEASURE_COREXY_BELT_TENSION]
description: Generates resonance graph used to ensure belts are equally tensioned. Uses the AXIS, TOOLHEAD, FREQUNECY_START and FREQUENCY_END parameter if you want to do specific measurements, (eg. GENERATE_SHAPER_GRAPHS AXIS=X TOOLHEAD=0 FREQUENCY_START=10 FREQUENCY_END=20)
gcode:
  {% set svv = printer.save_variables.variables %}
  {% set freq_start = params.FREQUENCY_START|default(10)|int %}
  {% set freq_end = params.FREQUENCY_END|default(133)|int %}
  {% set toolhead_parking_speed = printer["gcode_macro RatOS"].toolhead_parking_speed %}
  {% set toolhead_parking_acceleration = printer["gcode_macro RatOS"].toolhead_parking_acceleration %}
  {% set toolhead_parking_offset = printer["gcode_macro RatOS"].toolhead_parking_offset %}
  {% set toolhead_shaper_adxl_chip = printer["gcode_macro RatOS"].toolhead_shaper_adxl_chip %}
  {% set printable_x = [printer.toolhead.axis_minimum.x, printer.toolhead.axis_maximum.x] %}
	{% if printer["gcode_macro RatOS"].printable_x is defined %}
    {% set printable_x = printer["gcode_macro RatOS"].printable_x %}
	{% endif %}
  {% set printable_y = [printer.toolhead.axis_minimum.y, printer.toolhead.axis_maximum.y] %}
	{% if printer["gcode_macro RatOS"].printable_y is defined %}
    {% set printable_y = printer["gcode_macro RatOS"].printable_y %}
	{% endif %}

  MAYBE_HOME
  G90

  {% set default_toolhead = printer["gcode_macro RatOS"].toolhead_default|default(1)|int %}
  SET_VELOCITY_LIMIT ACCEL={toolhead_parking_acceleration[default_toolhead]} ACCEL_TO_DECEL={(toolhead_parking_acceleration[default_toolhead]/2)}
  T{default_toolhead}

  {% set safe_home_t1 = (printer.toolhead.axis_maximum.x|float + toolhead_parking_offset[1]) %}
  {% set probe_point_x = printable_x[0] + ((printable_x[1] - printable_x[0]) / 2) %}
  {% set probe_point_y = printable_y[0] + ((printable_y[1] - printable_y[0]) / 2) %}
  {% set probe_point_z = 20 %}

  {% set measure_t0 = true %}
  {% set measure_t1 = true %}
  {% if params.TOOLHEAD is defined %}
      {% if params.TOOLHEAD|lower == '0' %}
          {% set measure_t1 = false %}
      {% elif params.TOOLHEAD|lower == '1' %}
          {% set measure_t0 = false %}
      {% else %}
          {action_raise_error("Unknown toolhead specified. Expected 0 or 1.")}
      {% endif %}
  {% endif %}

  {% if params.AXIS is defined %}
      {% if params.AXIS|lower == 'x' %}
          {% if measure_t1 == true %}
              T1
              SET_VELOCITY_LIMIT ACCEL={toolhead_parking_acceleration[1]} ACCEL_TO_DECEL={(toolhead_parking_acceleration[1]/2)}
              G1 X{probe_point_x} F{(toolhead_parking_speed[1]*60)}
              TEST_RESONANCES AXIS=X CHIPS={toolhead_shaper_adxl_chip[1]} OUTPUT=raw_data NAME=t1 FREQ_START={freq_start} FREQ_END={freq_end}
          {% endif %}
          {% if measure_t0 == true %}
              T0
              SET_VELOCITY_LIMIT ACCEL={toolhead_parking_acceleration[0]} ACCEL_TO_DECEL={(toolhead_parking_acceleration[0]/2)}
              G1 X{probe_point_x} F{(toolhead_parking_speed[0]*60)}
              TEST_RESONANCES AXIS=X CHIPS={toolhead_shaper_adxl_chip[0]} OUTPUT=raw_data NAME=t0 FREQ_START={freq_start} FREQ_END={freq_end}
          {% endif %}
          G4 P5000
          {% if measure_t1 == true and measure_t0 == false %}
              RUN_SHELL_COMMAND CMD=generate_tension_graphs PARAMS="x 1"
          {% elif measure_t1 == false and measure_t0 == true %}
              RUN_SHELL_COMMAND CMD=generate_tension_graphs PARAMS="x 0"
          {% elif measure_t1 == true and measure_t0 == true %}
              RUN_SHELL_COMMAND CMD=generate_tension_graphs PARAMS=x
          {% endif %}
          RESPOND MSG="Belt tension graph generated for X and/or Y. You'll find them in the input_shaper folder in the machine tab!"
      {% elif params.AXIS|lower == 'y' %}
          {% if measure_t1 == false or measure_t0 == false %}
              {action_raise_error("Axis specified. Not supported for belt tension on Y.")}
          {% else %}
              T1
              SET_VELOCITY_LIMIT ACCEL={toolhead_parking_acceleration[1]} ACCEL_TO_DECEL={(toolhead_parking_acceleration[1]/2)}
              G1 X{safe_home_t1} F{(toolhead_parking_speed[1]*60)}
              TEST_RESONANCES AXIS=Y CHIPS={toolhead_shaper_adxl_chip[1]},{toolhead_shaper_adxl_chip[0]} OUTPUT=raw_data NAME=t2 POINT={safe_home_t1},{probe_point_y},{probe_point_z} FREQ_START={freq_start} FREQ_END={freq_end}
              G4 P5000
              RUN_SHELL_COMMAND CMD=generate_tension_graphs PARAMS="y 2"
              RESPOND MSG="Belt tension graph generated for X and/or Y. You'll find them in the input_shaper folder in the machine tab!"
          {% endif %}
      {% else %}
          {action_raise_error("Unknown axis specified. Expected X or Y.")}
      {% endif %}
  {% else %}
      {% if measure_t1 == true %}
          T1
          SET_VELOCITY_LIMIT ACCEL={toolhead_parking_acceleration[1]} ACCEL_TO_DECEL={(toolhead_parking_acceleration[1]/2)}
          G1 X{probe_point_x} F{(toolhead_parking_speed[1]*60)}
          TEST_RESONANCES AXIS=X CHIPS={toolhead_shaper_adxl_chip[1]} OUTPUT=raw_data NAME=t1 FREQ_START={freq_start} FREQ_END={freq_end}
      {% endif %}
      {% if measure_t0 == true %}
          T0
          SET_VELOCITY_LIMIT ACCEL={toolhead_parking_acceleration[0]} ACCEL_TO_DECEL={(toolhead_parking_acceleration[0]/2)}
          G1 X{probe_point_x} F{(toolhead_parking_speed[0]*60)}
          TEST_RESONANCES AXIS=X CHIPS={toolhead_shaper_adxl_chip[0]} OUTPUT=raw_data NAME=t0 FREQ_START={freq_start} FREQ_END={freq_end}
      {% endif %}
      {% if params.TOOLHEAD is not defined %}
        T1
        TEST_RESONANCES AXIS=Y CHIPS={toolhead_shaper_adxl_chip[1]},{toolhead_shaper_adxl_chip[0]} OUTPUT=raw_data NAME=t2 POINT={safe_home_t1},{probe_point_y},{probe_point_z} FREQ_START={freq_start} FREQ_END={freq_end}
      {% endif %}
      G4 P5000
      {% if measure_t1 == true and measure_t0 == false %}
          RUN_SHELL_COMMAND CMD=generate_tension_graphs PARAMS="x 1"
      {% elif measure_t1 == false and measure_t0 == true %}
          RUN_SHELL_COMMAND CMD=generate_tension_graphs PARAMS="x 0"
      {% elif measure_t1 == true and measure_t0 == true %}
          RUN_SHELL_COMMAND CMD=generate_tension_graphs PARAMS=x
      {% endif %}
      {% if params.TOOLHEAD is not defined %}
        RUN_SHELL_COMMAND CMD=generate_tension_graphs PARAMS="y 2"
      {% endif %}
      RESPOND MSG="Belt tension graph generated for X and/or Y. You'll find them in the input_shaper folder in the machine tab!"
  {% endif %}

  T1
  SET_VELOCITY_LIMIT ACCEL={toolhead_parking_acceleration[1]} ACCEL_TO_DECEL={(toolhead_parking_acceleration[1]/2)}
  G1 X{probe_point_x} F{(toolhead_parking_speed[1]*60)}
  SET_VELOCITY_LIMIT ACCEL={printer.toolhead.max_accel} ACCEL_TO_DECEL={(printer.toolhead.max_accel/2)}


[gcode_shell_command generate_tension_graphs]
command: /home/pi/printer_data/config/custom/scripts/generate-belt-tension-graph.sh
timeout: 120.
verbose: True
