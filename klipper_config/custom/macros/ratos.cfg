[gcode_macro RESUME]
description: Resumes the print if the printer is paused.
rename_existing: RESUME_BASE
gcode:
  # get current toolhead
  {% set ns = namespace(t=printer["gcode_macro RatOS"].toolhead_default|int) %}
  {% set toolhead_count = printer["gcode_macro RatOS"].toolhead_count|int %}
  {% for i in range(toolhead_count) %}
      {% if printer.toolhead.extruder == ('extruder%s' % '' if i==0 else i) %}
          {% set ns.t = i %}
      {% endif %}
  {% endfor %}

  # Prime
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  {% if printer['extruder%s' % ('' if ns.t==0 else ns.t)].can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
    G90
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
  RESUME_BASE


[gcode_macro _PARK]
gcode:
  # ratos config 
  {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
  {% set min_printable_x = printer["gcode_macro RatOS"].min_printable_x|float %}
  {% set max_printable_x = printer["gcode_macro RatOS"].max_printable_x|float %}
  {% set min_printable_y = printer["gcode_macro RatOS"].min_printable_y|float %}
  {% set max_printable_y = printer["gcode_macro RatOS"].max_printable_y|float %}

  # Get X position
  {% if params.X != '' %}
    {% if params.X|float >= min_printable_x + 5 and params.X|float <= max_printable_x - 5 %}
      {% set safe_x = params.X|float %}
    {% else %}
      {action_respond_info('The requested X co-ordinate is outside the defined axis bounds - using defaults')}
      {% set safe_x = min_printable_x + ((max_printable_x - min_printable_x) / 2) %}
    {% endif %}
  {% else %}
    {% set safe_x = min_printable_x + ((max_printable_x - min_printable_x) / 2) %}
  {% endif %}

  # Get Y position
  {% if params.LOCATION|default('back')|lower == 'back' %}
    {% set y = max_printable_y - 5 %}
  {% elif params.LOCATION|lower == 'front' %}
    {% set y = min_printable_y + 5 %}
  {% elif params.LOCATION|lower == 'center' %}
    {% set y = min_printable_y + ((max_printable_y - min_printable_y) / 2) %}
  {% endif %}

  # Absolute positioning
  G90 
  # Park
  G0 X{safe_x} Y{y} F{speed} 


[gcode_macro SET_CENTER_KINEMATIC_POSITION]
description: FOR DEBUGGING PURPOSES ONLY. Sets the internal printer kinematic state to the center of all axes regardless of actual physical position.
gcode:
  # ratos config 
  {% set min_printable_x = printer["gcode_macro RatOS"].min_printable_x|float %}
  {% set max_printable_x = printer["gcode_macro RatOS"].max_printable_x|float %}
  {% set min_printable_y = printer["gcode_macro RatOS"].min_printable_y|float %}
  {% set max_printable_y = printer["gcode_macro RatOS"].max_printable_y|float %}

  RESPOND MSG="WARNING: ONLY USE SET_CENTER_KINEMATIC_POSITION FOR DEBUGGING PURPOSES. YOU'RE OVERRIDING THE INTERNAL POSITIONING STATE OF THE PRINTER. PROCEED WITH CAUTION AND DO A PROPER G28 WHEN DONE."
  SET_GCODE_VARIABLE MACRO=MAYBE_HOME VARIABLE=is_kinematic_position_overriden VALUE=True
  SET_KINEMATIC_POSITION X={(min_printable_x + ((max_printable_x - min_printable_x) / 2))} Y={(min_printable_y + ((max_printable_y - min_printable_y) / 2))} Z={printer.toolhead.axis_maximum.z / 2}


[gcode_macro START_PRINT]
description: Start print procedure, use this in your Slicer.
variable_t: 0
variable_total_toolchanges: 0
variable_wipe_tower: 0
variable_on_demand: False
variable_first_layer_temp: 0
variable_other_layer_temp: 0
variable_layer_number: 1
gcode:
  # get ratos settings
  {% set toolhead_default = printer["gcode_macro RatOS"].toolhead_default|default(0)|int %}
  {% set z_probe_stowable = printer["gcode_macro RatOS"].z_probe|lower == 'stowable' %}
  {% set force_absolute_position = printer["gcode_macro RatOS"].force_absolute_position|lower == 'true' %}
  {% set start_print_heat_chamber_bed_temp = printer["gcode_macro RatOS"].start_print_heat_chamber_bed_temp|default(0.0)|float %}

  # get macro parameters
  {% set t = params.INITIAL_TOOL|default(toolhead_default)|int %}
  {% set total_toolchanges = params.TOTAL_TOOLCHANGES|default(0)|int %}
  {% set chamber_temp = params.CHAMBER_TEMP|default(0.0)|float %}
  {% set bed_temp = params.BED_TEMP|default(printer.heater_bed.target, true)|float %}
  {% set first_layer_temp = params.FIRST_LAYER_TEMP|default(printer.extruder.target, true)|float %}
  {% set other_layer_temp = params.OTHER_LAYER_TEMP|default(printer.extruder.target, true)|float %}
  {% set wipe_tower = params.WIPE_TOWER %}

  {% if printer["gcode_macro RatOS"].toolhead_allow_on_demand|lower == 'true' %}
    {% if wipe_tower|lower != 'true' %}
      M118 On demand extruder heating on
      SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=on_demand VALUE=True
    {% else %}
      M118 On demand extruder heating off
      SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=on_demand VALUE=False
    {% endif %}
  {% else %}
    # assume a multicolor print if there is no wipe tower, in this case slicer reports always 0 toolchanges 
    {% if wipe_tower|lower != 'true' %}
      {% set total_toolchanges = 2 %}
    {% endif %}
  {% endif %}

  # say hello 
  M118 On demand extruder heating: {on_demand}    # console output
  M118 Total toolchanges: {total_toolchanges}     # console output
  M118 Initial tool: {t}                          # console output

  # cache some values for later use in the layer change macro
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=layer_number VALUE=1
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=t VALUE={t}
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=first_layer_temp VALUE={first_layer_temp}
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=other_layer_temp VALUE={other_layer_temp}
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=total_toolchanges VALUE={total_toolchanges}
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=wipe_tower VALUE={1 if wipe_tower|lower == 'true' else 0}

  # start 
  CLEAR_PAUSE                                     # clear pause state
  {% if force_absolute_position == true %}
    G90                                           # Absolute positioning
  {% endif %}
  SAVE_GCODE_STATE NAME=start_print_state         # save gcode state
  G21                                             # Metric values
  G90                                             # Absolute positioning 
  M82                                             # Set extruder to absolute mode

  # start heating extruder before home. 
  # this prevents the extruder from sticking to not molten filament on the oozeguards
  # we also start to heat the bed to save some time
  M140 S{bed_temp}
  _HEATING_EXTRUDERS PREHEAT=true TEMP=150 WAIT=true T={t} ALL_EXTRUDER=True

  # handle stowable probe
  {% if z_probe_stowable == true %}
    STOWABLE_PROBE_BEGIN_BATCH
  {% endif %}

  # homing 
  MAYBE_HOME                                      # home if needed
  PARK_TOOLHEAD                                   # park active toolhead

  # heating chamber
  {% if chamber_temp > 0 %}
    _START_PRINT_HEAT_CHAMBER CHAMBER_TEMP={chamber_temp} BED_TEMP={start_print_heat_chamber_bed_temp}
  {% endif %}

  # Wait for bed to heat up
  M117 Heating bed...                             # display output
  RESPOND MSG="Heating bed..."                    # response
  M190 S{bed_temp}                                # set bed temperature and wait for it

  # Run the customizable "AFTER_HEATING_BED" macro.
  _START_PRINT_AFTER_HEATING_BED TEMP={first_layer_temp} T={t} ALL_EXTRUDER={total_toolchanges>1}

  # Run the customizable "BED_MESH" macro
  _START_PRINT_BED_MESH                           # create bed mesh

  # handle stowable probe
  {% if z_probe_stowable == true %}
    STOWABLE_PROBE_END_BATCH
  {% endif %}

  # Run the customizable "PARK" macro
  _START_PRINT_PARK                               # park before print starts

  # cooling down unneeded extruders
  {% if printer["gcode_macro RatOS"].toolhead_allow_on_demand|lower == 'true' %}
    {% set toolhead_count = printer["gcode_macro RatOS"].toolhead_count|int %}
    {% if wipe_tower|lower!='true' or total_toolchanges==0 %}
      {% for i in range(toolhead_count) %}
          {% if i != t %}
              SET_HEATER_TEMPERATURE HEATER=extruder{'' if i==0 else i} TARGET=0
          {% endif %}
      {% endfor %}
    {% endif %}
  {% endif %}

  # Wait for extruder to heat up
  M117 Heating Extruder...                        # display output
  RESPOND MSG="Heating Extruder..."               # response
  _HEATING_EXTRUDERS TEMP={first_layer_temp} WAIT=true T={t} ALL_EXTRUDER={total_toolchanges>1}

  # start printing
  M117 Printing...                                # display output
  RESPOND MSG="Printing..."                       # response
  RESTORE_GCODE_STATE NAME=start_print_state      # restore gcode state

  # Run the customizable "AFTER_HEATING_EXTRUDERS" macro.
  _START_PRINT_AFTER_HEATING_EXTRUDERS T={t} ALL_EXTRUDER={total_toolchanges>1}

  _SET_EXTRUSION_MODE                             # set extrusion mode based on user configuration
  G92 E0                                          # reset extrusion distance
  _T T={t} FORCE_OFFSET=true PRINTING==1          # select the initial toolhead


# Print macros. Call these from your slicer (custom g-code). 
# You can copy these to printer.cfg and modify them to your liking, or just use them as is.
# Read more here: https://rat-rig.github.io/V-CoreOS/#/slicers
[gcode_macro _START_PRINT_AFTER_HEATING_BED]
gcode:
  # Adjust bed tilt
  M117 Adjusting for tilt...
  Z_TILT_ADJUST
  M117 Rehoming after tilt adjustment...
  # Home again as Z will have changed after tilt adjustment and bed heating.
  G28 Z


[gcode_macro _START_PRINT_AFTER_HEATING_EXTRUDERS]
gcode:
  M118 _START_PRINT_AFTER_HEATING_EXTRUDERS
  {% set toolhead_count = printer["gcode_macro RatOS"].toolhead_count|int %}
  {% for i in range(toolhead_count) %}
    {% if (params.T|int) == i or params.ALL_EXTRUDER|lower == 'true' %}
      _T T={i} HOME=true FORCE_OFFSET=true
      {% if printer["gcode_macro RatOS"].nozzle_priming|lower == 'primeline' %}
        PRIME_LINE
      {% endif %}
      {% if printer["gcode_macro RatOS"].nozzle_priming|lower == 'primeblob' %}
        PRIME_BLOB
      {% endif %}
      SET_FAN_SPEED FAN=fan_extruder{'' if i==0 else i} SPEED=0
    {% endif %}
  {% endfor %}

  {% if printer["gcode_macro RatOS"].skew_profile is defined %}
    SKEW_PROFILE LOAD={printer["gcode_macro RatOS"].skew_profile}
  {% endif %}


# Macro to perform a modified z_tilt supporting stowable probes
[gcode_macro Z_TILT_ADJUST]
rename_existing: Z_TILT_ADJUST_ORIG
gcode:
    _T T={printer["gcode_macro RatOS"].toolhead_default|int} HOME=true 
    {% if printer["gcode_macro RatOS"].z_probe == 'stowable' %}
      DEPLOY_PROBE
    {% endif %}
    Z_TILT_ADJUST_ORIG
    {% if printer["gcode_macro RatOS"].z_probe == 'stowable' %}
      STOW_PROBE
    {% endif %}


[gcode_macro _START_PRINT_PARK]
gcode:
  {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
  # Park X
  PARK_TOOLHEAD
  # Absolute positioning
  G90 
  # Park Y
  G0 Y{printer.toolhead.axis_maximum.y - 5} F{speed} 


# The end_print macro is also called from CANCEL_PRINT.
[gcode_macro END_PRINT]
description: End print procedure, use this in your Slicer.
gcode:
  SAVE_GCODE_STATE NAME=end_print_state
  _END_PRINT_BEFORE_HEATERS_OFF
  TURN_OFF_HEATERS
  _END_PRINT_AFTER_HEATERS_OFF
  _END_PRINT_PARK
  # Clear skew profile if any was loaded.
  {% if printer["gcode_macro RatOS"].skew_profile is defined %}
    SET_SKEW CLEAR=1
  {% endif %}
  # Part cooling fan off
  M107
  RESTORE_GCODE_STATE NAME=end_print_state
  # reset the applied offset to the default hotend one
  _SET_OFFSET T={printer["gcode_macro RatOS"].toolhead_default|int}
  # Steppers off
  M84
  M117 Done :)
  RESPOND MSG="Done :)"


[gcode_macro _END_PRINT_PARK]
gcode:
  # ratos config 
  {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
  {% set max_printable_y = printer["gcode_macro RatOS"].max_printable_y|float %}
  # Park X
  PARK_TOOLHEAD
  # Absolute positioning
  G90 
  # Park Y
  G0 Y{max_printable_y - 5} F{speed} 


[gcode_macro _SET_EXTRUSION_MODE]
gcode:
  # Set extrusion mode based on user configuration
  {% if printer["gcode_macro RatOS"].relative_extrusion|lower == 'true' %}
      M83
  {% else %}
      M82
  {% endif %}


[gcode_macro LOAD_FILAMENT]
description: Loads new filament. Note: be careful with PETG, make sure you inspect the tip of your filament before loading to avoid jams.
gcode:
  {% set t = params.T|default(-1)|int %}
  {% set temp = params.TEMP|default(220) %}
  _LOAD_UNLOAD_FILAMENT T={t} TEMP={temp} ACTION='load'


[gcode_macro UNLOAD_FILAMENT]
description: Unloads the filament. Note: be careful with PETG, make sure you inspect the tip of your filament before reloading to avoid jams.
gcode:
  {% set t = params.T|default(-1)|int %}
  {% set temp = params.TEMP|default(220) %}
  _LOAD_UNLOAD_FILAMENT T={t} TEMP={temp} ACTION='unload'


[gcode_macro _LOAD_UNLOAD_FILAMENT]
gcode:
  {% set action = params.ACTION|default('load')|lower %}
  {% if action != 'load' %}
    {% set action = 'unload' %}
  {% endif %}

  {% set t = params.T|default(-1)|int %}
  {% set temp = params.TEMP|default(220) %}
  {% set toolhead_count = printer["gcode_macro RatOS"].toolhead_count|int %}

  {% set extruder = printer.toolhead.extruder %}
  {% set old_extruder = printer.toolhead.extruder %}

  {% if t > -1 %}
    {% if t<0 or t>=toolhead_count %}
      {% set extruder = false %}
      {action_respond_info("Toolhead %s doesnt exist" % t)}
    {% else %}
      {% set extruder = 'extruder%s' % '' if t==0 else t %}
    {% endif %}
  {% endif %}

  {% if extruder != false %}
    SAVE_GCODE_STATE NAME=load_state      # save gcode state
    G91                                   # relative positioning

    # check if extruder(s) can extrude
    {% set ns = namespace(can_extrude=printer['%s' % extruder].can_extrude) %}
    {% if t==-1 %}
      {% for i in range(toolhead_count) %}
        {% if printer['extruder%s' % '' if i==0 else i].can_extrude|lower  == 'false' %}
          {% set ns.can_extrude = false %}
        {% endif %}
      {% endfor %}
    {% endif %}

    # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
    {% if params.TEMP is defined or ns.can_extrude|lower == 'false' %}
      M117 Heating...
      _HEATING_EXTRUDERS TEMP={temp} WAIT=true T={t} ALL_EXTRUDER={t==-1}
    {% endif %}

    # sync extruders if needed or activate selected extruder
    {% if t==-1 %}
      ACTIVATE_EXTRUDER EXTRUDER='extruder'
      _SYNC_EXTRUDERS MOTION_QUEUE='extruder'
    {% else %}
      ACTIVATE_EXTRUDER EXTRUDER={extruder}
    {% endif %}

    # load filament
    {% if action == 'load' %}
      M117 Loading filament...              # response
      _LOAD_FILAMENT
      M117 Filament loaded!                 # response
      RESPOND MSG="Filament loaded!"        # response
    {% endif %}

    # unload filament
    {% if action == 'unload' %}
      M117 Unloading filament...            # response
      _UNLOAD_FILAMENT
      M117 Filament unloaded!               # response
      RESPOND MSG="Filament unloaded! Please inspect the tip of the filament before reloading."
    {% endif %}

    # unsync extruders and reactivate old extruder
    {% if t==-1 %}
      _SYNC_EXTRUDERS MOTION_QUEUE=''     
      ACTIVATE_EXTRUDER EXTRUDER={old_extruder}
    {% endif %}

    RESTORE_GCODE_STATE NAME=load_state   # restore gcode state
  {% endif %}


[gcode_macro _LOAD_FILAMENT]
gcode:
  {% set speed = printer["gcode_macro RatOS"].filament_load_speed|float * 60 %}
  {% set length = printer["gcode_macro RatOS"].filament_load_length|float %}

  M220 S100                               # reset speed
  G0 E{length} F{speed}                   # Load the filament into the hotend area.
  G4 P1000                                # Wait a second
  G0 E40 F100                             # Purge
  M400                                    # Wait for purge to complete


[gcode_macro _UNLOAD_FILAMENT]
gcode:
  {% set speed = printer["gcode_macro RatOS"].filament_unload_speed|float * 60 %}
  {% set length = printer["gcode_macro RatOS"].filament_unload_length|float %}

  M220 S100                               # reset speed
  G0 E10 F300                             # Extrude a bit
  G0 E-5 F3600                            # Extract filament to cold end area
  G4 P3000                                # Wait for three seconds
  G0 E5 F3600                             # Push back the filament to smash any stringing
  G0 E-15 F3600                           # Extract back fast in to the cold zone
  G0 E-{length|int} F{speed}              # Continue extraction slowly, allow the filament time to cool solid before it reaches the gears


[gcode_macro PRIME_BLOB]
description: Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.
gcode:
  SAVE_GCODE_STATE NAME=prime_blob_state
  M117 Priming nozzle with prime blob..
  RESPOND MSG="Priming nozzle with prime blob.."
  {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
  {% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
  {% set min_printable_x = printer["gcode_macro RatOS"].min_printable_x|float %}
  {% set max_printable_x = printer["gcode_macro RatOS"].max_printable_x|float %}
  {% set min_printable_y = printer["gcode_macro RatOS"].min_printable_y|float %}
  {% set x_start = min_printable_x + 5 %}
  {% set x_factor = 1 %}
  {% if printer.toolhead.extruder == 'extruder1' %}
    {% set x_start = max_printable_x - 5 %}
    {% set x_factor = -1 %}
  {% endif %}
  {% if printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'min' %}
    {% set y_start = min_printable_y + 5 %}
    {% set y_factor = 1 %}
  {% elif printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'max' %}
    {% set y_start = max_printable_y - 5 %}
    {% set y_factor = -1 %}
  {% endif %}
  {% set z = 5 %}
  # Absolute positioning
  G90 
  # Relative extrusion
  M83
  # Lift to start print Z height
  G0 Z{z} F{z_speed}
  # move to blob position along the edge of the bed
  G1 X{x_start} F{speed}
  G1 Y{y_start} F{speed}
  # Lower to blob height
  G1 Z0.5 F{z_speed}
  # Extrude a blob
  G1 F200 E30
  # 40% fan
  M106 S102 
  # Move the extruder up by 5mm while extruding, breaks away from blob
  G1 Z5 F100 E5  
  # Move to wipe position, but keep extruding so the wipe is attached to blob
  G1 F200 X{x_start + (25 * x_factor)} E1 
  # Go down diagonally while extruding
  # Broken down in z moves under 2mm as a workaround for a tuning tower test.
  # The tuning tower command thinks a new print has been started when z moves over 2mm and aborts.
  G1 F200 X{x_start + (30 * x_factor)} Z3.8 E0.5
  G1 F200 X{x_start + (35 * x_factor)} Z2.6 E0.5
  G1 F200 X{x_start + (40 * x_factor)} Z1.4 E0.5
  G1 F200 X{x_start + (45 * x_factor)} Z0.2 E0.5
  # 0% fan
  M106 S0
  # small wipe line
  G1 F200 X{x_start + (50 * x_factor)} Z0.2 E0.6 
  # Break away wipe
  G1 F{speed} X{x_start + (100 * x_factor)} E-0.2
  # Lift to start print Z height
  G0 Z{z} F{z_speed}
  # Move toolhead away
  G0 Y{y_start + (20 * y_factor)} F{speed}
  RESTORE_GCODE_STATE NAME=prime_blob_state
  
  
[gcode_macro PRIME_LINE]
description: Prints a primeline, used internally, if configured, as part of the START_PRINT macro.
gcode:
  SAVE_GCODE_STATE NAME=prime_line_state
  {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
  {% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
  {% set min_printable_x = printer["gcode_macro RatOS"].min_printable_x|float %}
  {% set max_printable_x = printer["gcode_macro RatOS"].max_printable_x|float %}
  {% set min_printable_y = printer["gcode_macro RatOS"].min_printable_y|float %}
  {% set x_start = min_printable_x + 5 %}
  {% set x_factor = 1 %}
  {% if printer.toolhead.extruder == 'extruder1' %}
    {% set x_start = max_printable_x - 5 %}
    {% set x_factor = -1 %}
  {% endif %}
  {% if printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'min' %}
    {% set y_start = min_printable_y + 5 %}
    {% set y_factor = 1 %}
  {% elif printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'max' %}
    {% set y_start = max_printable_y - 5 %}
    {% set y_factor = -1 %}
  {% endif %}
  {% set z = 5 %}
  # Absolute positioning
  G90 
  # Absolute extrusion
  M82
  M117 Priming nozzle with prime line..
  RESPOND MSG="Priming nozzle with prime line.."
  # Lift to start print Z height
  G0 Z{z} F{z_speed}
  # move to blob position along the edge of the bed
  G1 X{x_start} F{speed}
  G1 Y{y_start} F{speed}
  # Get ready to prime
  G1 Z0.3 F{z_speed}
  # Reset extrusion distance
  G92 E0
  # Prime nozzle 
  G1 X{x_start + (70 * x_factor)} E16 F1200
  # Wipe
  G1 X{x_start + (90 * x_factor)} F{speed}
  # Lift to start print Z height
  G0 Z{z} F{z_speed}
  # Move toolhead away
  G0 Y{y_start + (20 * y_factor)} F{speed}
  RESTORE_GCODE_STATE NAME=prime_line_state


[gcode_macro GENERATE_SHAPER_GRAPHS]
description: Genarates input shaper resonances graphs for analysis. Uses the AXIS, TOOLHEAD, FREQUNECY_START and FREQUENCY_END parameter if you want to do specific measurements, (eg. GENERATE_SHAPER_GRAPHS AXIS=X TOOLHEAD=0 FREQUENCY_START=10 FREQUENCY_END=20)
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set freq_start = params.FREQUENCY_START|default(10.0)|float %}
    {% set freq_end = params.FREQUENCY_END|default(133.0)|float %}
    {% set toolhead_parking_speed = printer["gcode_macro RatOS"].toolhead_parking_speed %}
    {% set toolhead_parking_acceleration = printer["gcode_macro RatOS"].toolhead_parking_acceleration %}
    {% set toolhead_shaper_adxl_chip = printer["gcode_macro RatOS"].toolhead_shaper_adxl_chip %}
    {% set min_printable_x = printer["gcode_macro RatOS"].min_printable_x|float %}
    {% set max_printable_x = printer["gcode_macro RatOS"].max_printable_x|float %}

    MAYBE_HOME
    G90
    T1

    {% set probe_point_x = min_printable_x + ((max_printable_x - min_printable_x) / 2) %}

    {% set measure_t0 = true %}
    {% set measure_t1 = true %}
    {% if params.TOOLHEAD is defined %}
        {% if params.TOOLHEAD|lower == '0' %}
            {% set measure_t1 = false %}
        {% elif params.TOOLHEAD|lower == '1' %}
            {% set measure_t0 = false %}
        {% else %}
            {action_raise_error("Unknown toolhead specified. Expected 0 or 1.")}
        {% endif %}
    {% endif %}

    {% if params.AXIS is defined %}
        {% if params.AXIS|lower == 'x' %}
            {% if measure_t1 == true %}
                T1
                SET_VELOCITY_LIMIT ACCEL={toolhead_parking_acceleration[1]} ACCEL_TO_DECEL={(toolhead_parking_acceleration[1]/2)}
                G1 X{probe_point_x} F{(toolhead_parking_speed[1]*60)}
                TEST_RESONANCES AXIS=X CHIPS={toolhead_shaper_adxl_chip[1]} NAME=t1 FREQ_START={freq_start} FREQ_END={freq_end}
            {% endif %}
            {% if measure_t0 == true %}
                T0
                SET_VELOCITY_LIMIT ACCEL={toolhead_parking_acceleration[0]} ACCEL_TO_DECEL={(toolhead_parking_acceleration[0]/2)}
                G1 X{probe_point_x} F{(toolhead_parking_speed[0]*60)}
                TEST_RESONANCES AXIS=X CHIPS={toolhead_shaper_adxl_chip[0]} NAME=t0 FREQ_START={freq_start} FREQ_END={freq_end}
            {% endif %}
            G4 P5000
            {% if measure_t1 == true and measure_t0 == false %}
                RUN_SHELL_COMMAND CMD=generate_shaper_graphs PARAMS="x 1"
            {% elif measure_t1 == false and measure_t0 == true %}
                RUN_SHELL_COMMAND CMD=generate_shaper_graphs PARAMS="x 0"
            {% elif measure_t1 == true and measure_t0 == true %}
                RUN_SHELL_COMMAND CMD=generate_shaper_graphs PARAMS=x
            {% endif %}
            RESPOND MSG="Input shaper graph generated for the X axis. You'll find it in the input_shaper folder in the machine tab!"
        {% elif params.AXIS|lower == 'y' %}
            {% if measure_t1 == true %}
                T1
                SET_VELOCITY_LIMIT ACCEL={toolhead_parking_acceleration[1]} ACCEL_TO_DECEL={(toolhead_parking_acceleration[1]/2)}
                G1 X{probe_point_x} F{(toolhead_parking_speed[1]*60)}
                TEST_RESONANCES AXIS=Y CHIPS={toolhead_shaper_adxl_chip[1]} NAME=t1 FREQ_START={freq_start} FREQ_END={freq_end}
            {% endif %}
            {% if measure_t0 == true %}
                T0
                SET_VELOCITY_LIMIT ACCEL={toolhead_parking_acceleration[0]} ACCEL_TO_DECEL={(toolhead_parking_acceleration[0]/2)}
                G1 X{probe_point_x} F{(toolhead_parking_speed[0]*60)}
                TEST_RESONANCES AXIS=Y CHIPS={toolhead_shaper_adxl_chip[0]} NAME=t0 FREQ_START={freq_start} FREQ_END={freq_end}
            {% endif %}
            G4 P5000
            {% if measure_t1 == true and measure_t0 == false %}
                RUN_SHELL_COMMAND CMD=generate_shaper_graphs PARAMS="y 1"
            {% elif measure_t1 == false and measure_t0 == true %}
                RUN_SHELL_COMMAND CMD=generate_shaper_graphs PARAMS="y 0"
            {% elif measure_t1 == true and measure_t0 == true %}
                RUN_SHELL_COMMAND CMD=generate_shaper_graphs PARAMS=y
            {% endif %}
            RESPOND MSG="Input shaper graph generated for the Y axis. You'll find it in the input_shaper folder in the machine tab!"
        {% else %}
            {action_raise_error("Unknown axis specified. Expected X or Y.")}
        {% endif %}
    {% else %}
        {% if measure_t1 == true %}
            T1
            SET_VELOCITY_LIMIT ACCEL={toolhead_parking_acceleration[1]} ACCEL_TO_DECEL={(toolhead_parking_acceleration[1]/2)}
            G1 X{probe_point_x} F{(toolhead_parking_speed[1]*60)}
            TEST_RESONANCES AXIS=X CHIPS={toolhead_shaper_adxl_chip[1]} NAME=t1 FREQ_START={freq_start} FREQ_END={freq_end}
            TEST_RESONANCES AXIS=Y CHIPS={toolhead_shaper_adxl_chip[1]} NAME=t1 FREQ_START={freq_start} FREQ_END={freq_end}
        {% endif %}
        {% if measure_t0 == true %}
            T0
            SET_VELOCITY_LIMIT ACCEL={toolhead_parking_acceleration[0]} ACCEL_TO_DECEL={(toolhead_parking_acceleration[0]/2)}
            G1 X{probe_point_x} F{(toolhead_parking_speed[0]*60)}
            TEST_RESONANCES AXIS=X CHIPS={toolhead_shaper_adxl_chip[0]} NAME=t0 FREQ_START={freq_start} FREQ_END={freq_end}
            TEST_RESONANCES AXIS=Y CHIPS={toolhead_shaper_adxl_chip[0]} NAME=t0 FREQ_START={freq_start} FREQ_END={freq_end}
        {% endif %}
        G4 P5000
        {% if measure_t1 == true and measure_t0 == false %}
            RUN_SHELL_COMMAND CMD=generate_shaper_graphs PARAMS="x 1"
            RUN_SHELL_COMMAND CMD=generate_shaper_graphs PARAMS="y 1"
        {% elif measure_t1 == false and measure_t0 == true %}
            RUN_SHELL_COMMAND CMD=generate_shaper_graphs PARAMS="x 0"
            RUN_SHELL_COMMAND CMD=generate_shaper_graphs PARAMS="y 0"
        {% elif measure_t1 == true and measure_t0 == true %}
            RUN_SHELL_COMMAND CMD=generate_shaper_graphs PARAMS=x
            RUN_SHELL_COMMAND CMD=generate_shaper_graphs PARAMS=y
        {% endif %}
        RESPOND MSG="Input shaper graphs generated for X and Y. You'll find them in the input_shaper folder in the machine tab!"
    {% endif %}

    T1
    SET_VELOCITY_LIMIT ACCEL={toolhead_parking_acceleration[1]} ACCEL_TO_DECEL={(toolhead_parking_acceleration[1]/2)}
    G1 X{probe_point_x} F{(toolhead_parking_speed[1]*60)}
    SET_VELOCITY_LIMIT ACCEL={printer.toolhead.max_accel} ACCEL_TO_DECEL={(printer.toolhead.max_accel/2)}


[gcode_shell_command generate_shaper_graphs]
command: /home/pi/klipper_config/custom/scripts/generate-shaper-graph.sh
timeout: 120.
verbose: True


[gcode_macro MEASURE_COREXY_BELT_TENSION]
description: Generates resonance graph used to ensure belts are equally tensioned. Uses the AXIS, TOOLHEAD, FREQUNECY_START and FREQUENCY_END parameter if you want to do specific measurements, (eg. GENERATE_SHAPER_GRAPHS AXIS=X TOOLHEAD=0 FREQUENCY_START=10 FREQUENCY_END=20)
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set freq_start = params.FREQUENCY_START|default(10.0)|float %}
    {% set freq_end = params.FREQUENCY_END|default(133.0)|float %}
    {% set toolhead_parking_speed = printer["gcode_macro RatOS"].toolhead_parking_speed %}
    {% set toolhead_parking_acceleration = printer["gcode_macro RatOS"].toolhead_parking_acceleration %}
    {% set toolhead_parking_offset = printer["gcode_macro RatOS"].toolhead_parking_offset %}
    {% set toolhead_shaper_adxl_chip = printer["gcode_macro RatOS"].toolhead_shaper_adxl_chip %}
    {% set min_printable_x = printer["gcode_macro RatOS"].min_printable_x|float %}
    {% set max_printable_x = printer["gcode_macro RatOS"].max_printable_x|float %}
    {% set min_printable_y = printer["gcode_macro RatOS"].min_printable_y|float %}
    {% set max_printable_y = printer["gcode_macro RatOS"].max_printable_y|float %}

    MAYBE_HOME
    G90
    SET_VELOCITY_LIMIT ACCEL={toolhead_parking_acceleration[1]} ACCEL_TO_DECEL={(toolhead_parking_acceleration[1]/2)}
    T1

    {% set safe_home_t1 = (printer.toolhead.axis_maximum.x|float + toolhead_parking_offset[1]) %}
    {% set probe_point_x = min_printable_x + ((max_printable_x - min_printable_x) / 2) %}
    {% set probe_point_y = min_printable_y + ((max_printable_y - min_printable_y) / 2) %}
    {% set probe_point_z = 20 %}

    {% set measure_t0 = true %}
    {% set measure_t1 = true %}
    {% if params.TOOLHEAD is defined %}
        {% if params.TOOLHEAD|lower == '0' %}
            {% set measure_t1 = false %}
        {% elif params.TOOLHEAD|lower == '1' %}
            {% set measure_t0 = false %}
        {% else %}
            {action_raise_error("Unknown toolhead specified. Expected 0 or 1.")}
        {% endif %}
    {% endif %}

    {% if params.AXIS is defined %}
        {% if params.AXIS|lower == 'x' %}
            {% if measure_t1 == true %}
                T1
                SET_VELOCITY_LIMIT ACCEL={toolhead_parking_acceleration[1]} ACCEL_TO_DECEL={(toolhead_parking_acceleration[1]/2)}
                G1 X{probe_point_x} F{(toolhead_parking_speed[1]*60)}
                TEST_RESONANCES AXIS=X CHIPS={toolhead_shaper_adxl_chip[1]} OUTPUT=raw_data NAME=t1 FREQ_START={freq_start} FREQ_END={freq_end}
            {% endif %}
            {% if measure_t0 == true %}
                T0
                SET_VELOCITY_LIMIT ACCEL={toolhead_parking_acceleration[0]} ACCEL_TO_DECEL={(toolhead_parking_acceleration[0]/2)}
                G1 X{probe_point_x} F{(toolhead_parking_speed[0]*60)}
                TEST_RESONANCES AXIS=X CHIPS={toolhead_shaper_adxl_chip[0]} OUTPUT=raw_data NAME=t0 FREQ_START={freq_start} FREQ_END={freq_end}
            {% endif %}
            G4 P5000
            {% if measure_t1 == true and measure_t0 == false %}
                RUN_SHELL_COMMAND CMD=generate_tension_graphs PARAMS="x 1"
            {% elif measure_t1 == false and measure_t0 == true %}
                RUN_SHELL_COMMAND CMD=generate_tension_graphs PARAMS="x 0"
            {% elif measure_t1 == true and measure_t0 == true %}
                RUN_SHELL_COMMAND CMD=generate_tension_graphs PARAMS=x
            {% endif %}
            RESPOND MSG="Belt tension graph generated for X and/or Y. You'll find them in the input_shaper folder in the machine tab!"
        {% elif params.AXIS|lower == 'y' %}
            {% if measure_t1 == false or measure_t0 == false %}
                {action_raise_error("Axis specified. Not supported for belt tension on Y.")}
            {% else %}
                T1
                SET_VELOCITY_LIMIT ACCEL={toolhead_parking_acceleration[1]} ACCEL_TO_DECEL={(toolhead_parking_acceleration[1]/2)}
                G1 X{safe_home_t1} F{(toolhead_parking_speed[1]*60)}
                TEST_RESONANCES AXIS=Y CHIPS={toolhead_shaper_adxl_chip[1]},{toolhead_shaper_adxl_chip[0]} OUTPUT=raw_data NAME=t2 POINT={safe_home_t1},{probe_point_y},{probe_point_z} FREQ_START={freq_start} FREQ_END={freq_end}
                G4 P5000
                RUN_SHELL_COMMAND CMD=generate_tension_graphs PARAMS="y 2"
                RESPOND MSG="Belt tension graph generated for X and/or Y. You'll find them in the input_shaper folder in the machine tab!"
            {% endif %}
        {% else %}
            {action_raise_error("Unknown axis specified. Expected X or Y.")}
        {% endif %}
    {% else %}
        {% if measure_t1 == true %}
            T1
            SET_VELOCITY_LIMIT ACCEL={toolhead_parking_acceleration[1]} ACCEL_TO_DECEL={(toolhead_parking_acceleration[1]/2)}
            G1 X{probe_point_x} F{(toolhead_parking_speed[1]*60)}
            TEST_RESONANCES AXIS=X CHIPS={toolhead_shaper_adxl_chip[1]} OUTPUT=raw_data NAME=t1 FREQ_START={freq_start} FREQ_END={freq_end}
        {% endif %}
        {% if measure_t0 == true %}
            T0
            SET_VELOCITY_LIMIT ACCEL={toolhead_parking_acceleration[0]} ACCEL_TO_DECEL={(toolhead_parking_acceleration[0]/2)}
            G1 X{probe_point_x} F{(toolhead_parking_speed[0]*60)}
            TEST_RESONANCES AXIS=X CHIPS={toolhead_shaper_adxl_chip[0]} OUTPUT=raw_data NAME=t0 FREQ_START={freq_start} FREQ_END={freq_end}
        {% endif %}
        {% if params.TOOLHEAD is not defined %}
          T1
          TEST_RESONANCES AXIS=Y CHIPS={toolhead_shaper_adxl_chip[1]},{toolhead_shaper_adxl_chip[0]} OUTPUT=raw_data NAME=t2 POINT={safe_home_t1},{probe_point_y},{probe_point_z} FREQ_START={freq_start} FREQ_END={freq_end}
        {% endif %}
        G4 P5000
        {% if measure_t1 == true and measure_t0 == false %}
            RUN_SHELL_COMMAND CMD=generate_tension_graphs PARAMS="x 1"
        {% elif measure_t1 == false and measure_t0 == true %}
            RUN_SHELL_COMMAND CMD=generate_tension_graphs PARAMS="x 0"
        {% elif measure_t1 == true and measure_t0 == true %}
            RUN_SHELL_COMMAND CMD=generate_tension_graphs PARAMS=x
        {% endif %}
        {% if params.TOOLHEAD is not defined %}
          RUN_SHELL_COMMAND CMD=generate_tension_graphs PARAMS="y 2"
        {% endif %}
        RESPOND MSG="Belt tension graph generated for X and/or Y. You'll find them in the input_shaper folder in the machine tab!"
    {% endif %}

    T1
    SET_VELOCITY_LIMIT ACCEL={toolhead_parking_acceleration[1]} ACCEL_TO_DECEL={(toolhead_parking_acceleration[1]/2)}
    G1 X{probe_point_x} F{(toolhead_parking_speed[1]*60)}
    SET_VELOCITY_LIMIT ACCEL={printer.toolhead.max_accel} ACCEL_TO_DECEL={(printer.toolhead.max_accel/2)}


[gcode_shell_command generate_tension_graphs]
command: /home/pi/klipper_config/custom/scripts/generate-belt-tension-graph.sh
timeout: 120.
verbose: True
