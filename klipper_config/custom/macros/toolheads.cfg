#############################################################################################################
# 
# Toolhead Selection
# 
#############################################################################################################
[gcode_macro T0]
gcode:
    {% set is_printing = params.P|default(0) %}
    {% set force_offset = params.O|default(0) %}
    _T T=0 PRINTING={is_printing} OFFSET={force_offset}


[gcode_macro T1]
gcode:
    {% set is_printing = params.P|default(0) %}
    {% set force_offset = params.O|default(0) %}
    _T T=1 PRINTfING={is_printing} OFFSET={force_offset}


[gcode_macro _T]
gcode:
    {% if params.T is defined %}
        {% set idex_mode = '' %}
        {% if printer["dual_carriage"] is defined %}
            {% set idex_mode = printer["dual_carriage"].carriage_1|lower %}
        {% endif %}
        {% if idex_mode != "copy" and idex_mode != "mirror" %}
            {% set t = params.T|int %}  
            {% set toolhead_count = printer["gcode_macro RatOS"].toolhead_count|int %}
            {% if (printer.toolhead.extruder != ('extruder%s' % ('' if t==0 else t)))|lower == "true" and toolhead_count > 1 %} 

                M118 T{t}
                M220 S100                           # reset any speed override

                # get parameters
                {% set force_offset = params.OFFSET %}
                {% set is_printing = params.PRINTING %}

                # park toolhead
                {% set zhop_retract = printer["gcode_macro RatOS"].toolhead_parking_zhop_retract|default(0.8)|float %}
                {% if is_printing == '1' %}
                    _TOOLHEAD_PARKING_RETRACT R={zhop_retract}
                    _TOOLHEAD_PARKING_Z_HOP
                {% endif %}
                _PARK_TOOLHEAD

                # turn part cooling fans off
                {% set act_fan_speed = printer["fan_generic fan_%s" % printer.toolhead.extruder].speed %}
                {% if fan_speed != -1 %}
                    {% for i in range(toolhead_count) %}
                        SET_FAN_SPEED FAN=fan_extruder{'' if i==0 else i} SPEED=0
                    {% endfor %}
                    # Update core Klipper's fan speed to the fan speed of the active toolhead
                    # Only do this if you have a sacrificial [fan] section
                    M106.1 S0
                {% endif %}

                # get current toolhead
                {% set ns = namespace(act_t=printer["gcode_macro RatOS"].toolhead_default|int) %}
                {% for i in range(toolhead_count) %}
                    {% if printer.toolhead.extruder == ('extruder%s' % '' if i==0 else i) %}
                        {% set ns.act_t = i %}
                    {% endif %}
                {% endfor %}

                # activate extruder
                ACTIVATE_EXTRUDER EXTRUDER=extruder{'' if t==0 else t}
                
                # activate carriage
                SET_DUAL_CARRIAGE CARRIAGE={printer["gcode_macro RatOS"].toolhead_carriage[t]}

                # set offsets
                {% if is_printing == '1' or force_offset == '1' %}
                    {% if "xyz" in printer.toolhead.homed_axes %}
                        _SET_OFFSET T={t}
                    {% endif %}
                {% endif %}

                # set input shaper
                {% set shaper_x_freq = printer["gcode_macro RatOS"].toolhead_shaper_x_freq %}
                {% set shaper_y_freq = printer["gcode_macro RatOS"].toolhead_shaper_y_freq %}
                {% set shaper_x_type = printer["gcode_macro RatOS"].toolhead_shaper_x_type %}
                {% set shaper_y_type = printer["gcode_macro RatOS"].toolhead_shaper_y_type %}
                SET_INPUT_SHAPER SHAPER_FREQ_X={(shaper_x_freq[t]|float)} SHAPER_FREQ_Y={(shaper_y_freq[t]|float)} SHAPER_TYPE_X={(shaper_x_type[t]|lower)} SHAPER_TYPE_Y={(shaper_y_type[t]|lower)}

                # turn part cooling fans on
                {% set toolhead_sync_fans = printer["gcode_macro RatOS"].toolhead_sync_fans|default(false)|lower %}
                {% if fan_speed != -1 %}
                    {% for i in range(toolhead_count) %}
                        {% if i == t or toolhead_sync_fans == 'true' %}
                            SET_FAN_SPEED FAN=fan_extruder{'' if i==0 else i} SPEED={act_fan_speed}
                        {% endif %}
                    {% endfor %}
                    # Update core Klipper's fan speed to the fan speed of the active toolhead
                    # Only do this if you have a sacrificial [fan] section
                    M106.1 S{act_fan_speed}
                {% endif %}

                M400                                            # wait for movements
                G90                                             # absolute positioning
                G92 E0                                          # reset extrusion distance

            {% endif %}
        {% endif %}
    {% endif %}


[gcode_macro _SET_OFFSET]
gcode:
    # parameters 
    {% set t = params.T|int %}  
    {% set svv = printer.save_variables.variables %}

    # set offset
    {% if svv.applied_offset != t %}
        M118 Applying offset for T{t}
        {% if t==0 %}
            SET_GCODE_OFFSET X_ADJUST={svv.xoffset} Y_ADJUST={svv.yoffset}
            SET_GCODE_OFFSET Z_ADJUST={svv.zoffset} MOVE=1
        {% elif t==1 %}
            SET_GCODE_OFFSET X_ADJUST={(0-svv.xoffset)} Y_ADJUST={(0-svv.yoffset)}
            SET_GCODE_OFFSET Z_ADJUST={(0-svv.zoffset)} MOVE=1
        {% endif %}
        SAVE_VARIABLE VARIABLE=applied_offset VALUE={t}
        M400
    {% else %}
        M118 Offset for T{t} already applied
    {% endif %}


[delayed_gcode _INIT_TOOLHEADS]
initial_duration: 0.1
gcode:
    {% if printer["gcode_macro RatOS"].toolhead_default is defined %}
        # ratos config 
        {% set default_toolhead = printer["gcode_macro RatOS"].toolhead_default|int %}

        # save variable
        {% set svv = printer.save_variables.variables %}
        SAVE_VARIABLE VARIABLE=applied_offset VALUE={default_toolhead}

        # IDEX default mode
        {% if printer["dual_carriage"] is defined %}
            IDEX_SINGLE
        {% endif %}
    {% endif %}


#############################################################################################################
# 
# Toolhead Parking
# 
#############################################################################################################

[gcode_macro _PARK_TOOLHEAD]
gcode:
    # get IDEX mode
    {% set idex_mode = 'none' %}
	{% if printer["dual_carriage"] is defined %}
		{% set idex_mode = printer["dual_carriage"].carriage_1|lower %}
	{% endif %}

    {% if idex_mode != "copy" and idex_mode != "mirror" %}
        # ratos config 
        {% set speed = printer["gcode_macro RatOS"].toolhead_parking_speed %}
        {% set acceleration = printer["gcode_macro RatOS"].toolhead_parking_acceleration %}
        {% set toolhead_count = printer["gcode_macro RatOS"].toolhead_count|int %}
        {% set parking_offset = printer["gcode_macro RatOS"].toolhead_parking_offset %}

        # get current toolhead
        {% set ns = namespace(t=printer["gcode_macro RatOS"].toolhead_default|int) %}
        {% for i in range(toolhead_count) %}
            {% if printer.toolhead.extruder == ('extruder%s' % '' if i==0 else i) %}
                {% set ns.t = i %}
            {% endif %}
        {% endfor %}

        {% set home = printer["gcode_macro RatOS"].toolhead_home_x[ns.t] + parking_offset[ns.t] %}

        # park toolhead
        {% if 'x' in printer.toolhead.homed_axes %}
            SAVE_GCODE_STATE NAME=_PARK_TOOLHEAD
            G90                                                             # absolute positioning
            SET_VELOCITY_LIMIT ACCEL={acceleration[ns.t]} ACCEL_TO_DECEL={(acceleration[ns.t]/2)}
            G1 X{home} F{(speed[ns.t]*60)}                                  # move to parking position
            SET_VELOCITY_LIMIT ACCEL={printer.toolhead.max_accel} ACCEL_TO_DECEL={(printer.toolhead.max_accel/2)}
            M400                                                            # wait for movements
            RESTORE_GCODE_STATE NAME=_PARK_TOOLHEAD 
        {% endif %}
    {% endif %}


[gcode_macro _TOOLHEAD_PARKING_RETRACT]
variable_retracts: 1
gcode:
    # parameters 
    {% set retract = params.R|default(0.8)|float %}

    # ratos config 
    {% set toolhead_count = printer["gcode_macro RatOS"].toolhead_count|int %}

    # get current toolhead
    {% set ns = namespace(t=printer["gcode_macro RatOS"].toolhead_default|int) %}
    {% for i in range(toolhead_count) %}
        {% if printer.toolhead.extruder == ('extruder%s' % '' if i==0 else i) %}
            {% set ns.t = i %}
        {% endif %}
    {% endfor %}

    # retract
    {% if retract > 0 %}
        {% if printer['extruder%s' % ('' if ns.t==0 else ns.t)].can_extrude|lower == 'true' %}
            M82                             # absolute extrusion
            G92 E0                          # reset extrusion distance
            G1 F600 E-{retract}             # retract
            G92 E0                          # reset extrusion distance
            # Set extrusion mode based on user configuration
            {% if printer["gcode_macro RatOS"].relative_extrusion|lower == 'true' %}
                M83
            {% else %}
                M82
            {% endif %}
        {% endif %}
    {% endif %}


[gcode_macro _TOOLHEAD_PARKING_Z_HOP]
gcode:
    # ratos config 
    {% set zhop = printer["gcode_macro RatOS"].toolhead_parking_zhop|default(0.5)|float %}
    {% set speed = printer["gcode_macro RatOS"].toolhead_parking_zhop_speed|default(15)|float %}

    # z-hop
    G91                         # relative positioning
    G1 Z+{zhop} F{speed * 60}   # z-hop
    G90                         # absolute positioning
    M400                        # wait for movements


# this fixes an superslicer issue
# only the currently active extruders temp got changed after the first layer.
# call this from the slicers change layer custom gcode 
[gcode_macro _LAYER_CHANGE]
variable_t: 0
variable_layer_number: 1                  
variable_all_toolheads: 0                 
variable_extruder_other_layer_temp: 0     
variable_extruder_other_layer_temp_1: 0   
gcode:
    {% if printer["gcode_macro _LAYER_CHANGE"].layer_number is defined %}
        {% set layer_number = printer["gcode_macro _LAYER_CHANGE"].layer_number|int %}
        {% if printer["gcode_macro _LAYER_CHANGE"].extruder_other_layer_temp is defined %}
            {% if layer_number == 2 %}
                {% set t = printer["gcode_macro _LAYER_CHANGE"].t|int %}
                {% set both_toolheads = printer["gcode_macro _LAYER_CHANGE"].all_toolheads|default(1)|int %}
                {% set extruder_other_layer_temp = printer["gcode_macro _LAYER_CHANGE"].extruder_other_layer_temp|float %}
                {% set extruder_other_layer_temp_1 = printer["gcode_macro _LAYER_CHANGE"].extruder_other_layer_temp_1|float %}
                {% if t==0 or both_toolheads==1 %}
                    M104 S{extruder_other_layer_temp} T0
                {% endif %}
                {% if t==1 or both_toolheads==1 %}
                    M104 S{extruder_other_layer_temp_1} T1
                {% endif %}
            {% endif %}
        {% endif %}
        SET_GCODE_VARIABLE MACRO=_LAYER_CHANGE VARIABLE=layer_number VALUE={layer_number + 1}
    {% endif %}


#############################################################################################################
# 
# Toolhead Fan Control
# 
#############################################################################################################

[gcode_macro M106]
# Only rename_existing if you have a sacrificial [fan] section
rename_existing: M106.1
# The variable that controls fan speed swopping if not specifying P parameter
# -1 means the control is disabled, a value of 0-1 is the requested fan speed.
# Access via {printer["gcode_macro M106"].swap_speed}
variable_swap_speed: -1
gcode:
    # parameters
    {% set s = [[params.S|default(255)|int, 255]|min, 0]|max %}
    {% set p = params.P|default(-1)|int %}
    {% set speed = s / 255 %}

    # ratos config 
    {% set toolhead_count = printer["gcode_macro RatOS"].toolhead_count|int %}
    {% set toolhead_sync_fans = printer["gcode_macro RatOS"].toolhead_sync_fans|default(false)|lower %}

    # Set speed to -1 by default
    SET_GCODE_VARIABLE MACRO=M106 VARIABLE=swap_speed VALUE=-1

    # Set speed
    {% if p == -1 %}
        # Set current active extruder fan
        {% if speed == 0 %}
            # Always turn off all fans if S0 is specified without a specific fan
            {% for i in range(toolhead_count) %}
                SET_FAN_SPEED FAN=fan_extruder{'' if i==0 else i} SPEED={speed}
            {% endfor %}
        {% else %}
            # Opt into fan speed swop control
            SET_GCODE_VARIABLE MACRO=M106 VARIABLE=swap_speed VALUE={speed}
            {% for i in range(toolhead_count) %}
                {% if (printer.toolhead.extruder == ('extruder%s' % ('' if i==0 else i)))|lower == "true" or toolhead_sync_fans == 'true' %} 
                    SET_FAN_SPEED FAN=fan_extruder{'' if i==0 else i} SPEED={speed}
                {% else %}
                    SET_FAN_SPEED FAN=fan_extruder{'' if i==0 else i} SPEED={0}
                {% endif %}
            {% endfor %}
        {% endif %}
    {% else %}
        # Set specified active extruder fan
        {% for i in range(toolhead_count) %}
            SET_FAN_SPEED FAN=fan_extruder{'' if i==0 else i} SPEED={speed if i == p else 0}
        {% endfor %}
    {% endif %}

    # Update core Klipper's fan speed
    # Only do this if you have a sacrificial [fan] section
    M106.1 S{s}


[gcode_macro M107]
rename_existing: M107.1
gcode:
    {% set p = params.P|default(-1)|int %}
    M106 S0 P{p}


#############################################################################################################
# 
# Idex Calibration Macros
# 
#############################################################################################################

# Configure this to draw 2 line segments perpendicular to the dual_carraige axis
# that meet in the middle of the bed. Both lines should have the same coordinate
# on the axis of the dual_carraige. If they don't print inline, adjust your endstop
# settings.
[gcode_macro set_separation]
gcode:
    {% set svv = printer.save_variables.variables %}

    {% set oldX = svv.xoffset|float %}
    {% set oldY = svv.yoffset|float %}
    {% set oldZ = svv.zoffset|float %}

    {% if params.X is defined %}
        SAVE_VARIABLE VARIABLE=xoffset VALUE={ params.X|float }
    {% endif %}

    {% if params.Y is defined %}
        SAVE_VARIABLE VARIABLE=yoffset VALUE={ params.Y|float }
    {% endif %}

    {% if params.Z is defined %}
        SAVE_VARIABLE VARIABLE=zoffset VALUE={ params.Z|float }
    {% endif %}

    {% if params.X_ADJUST is defined %}
        {% set newX = params.X_ADJUST|float + oldX %}
        SAVE_VARIABLE VARIABLE=xoffset VALUE={ newX|float }
    {% endif %}

    {% if params.Y_ADJUST is defined %}
        {% set newY = params.Y_ADJUST|float + oldY %}
        SAVE_VARIABLE VARIABLE=yoffset VALUE={ newY|float }
    {% endif %}

    {% if params.Z_ADJUST is defined %}
        {% set newZ = params.Z_ADJUST|float + oldZ %}
        SAVE_VARIABLE VARIABLE=yoffset VALUE={ newZ|float }
    {% endif %}


[gcode_macro calibrate_separation]
gcode:
    {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}

    MAYBE_HOME
    G90
    M83

    T1
    PRIME_BLOB
    G1 Z2 F6000
    G1 X150 Y148 F{speed}
    G1 Z.3 F4800
    G1 Y100 E3 F500
    G1 Z2 F6000
    G1 X148 Y150 F{speed}
    G1 Z.3 F4800
    G1 X100 E3 F500

    T0
    PRIME_BLOB
    G1 Z2 F6000
    G1 X150 Y152 F{speed}
    G1 Z.3 F4800
    G1 Y200 E3 F500
    G1 Z2 F6000
    G1 X152 Y150 F{speed}
    G1 Z.3 F4800
    G1 X200 E3 F500

    {% if printer["gcode_macro RatOS"].relative_extrusion|lower == 'true' %}
        M83
    {% else %}
        M82
    {% endif %}
    T{printer["gcode_macro RatOS"].toolhead_default|int}
