#############################################################################################################
# 
# Toolhead Selection
# 
#############################################################################################################
[gcode_macro T0]
gcode:
    {% set p = params.P|default(0)|int %}
    {% set x = params.X|default(-1.0)|float %}
    {% set y = params.Y|default(-1.0)|float %}
    {% set z = params.Z|default(0.0)|float %}
    {% set s = params.S|default(1)|int %}
    _T T=0 PRINTING={p} X={x} Y={y} Z={z} SWIPE={s}


[gcode_macro T1]
gcode:
    {% set p = params.P|default(0)|int %}
    {% set x = params.X|default(-1.0)|float %}
    {% set y = params.Y|default(-1.0)|float %}
    {% set z = params.Z|default(0.0)|float %}
    {% set s = params.S|default(1)|int %}
    _T T=1 PRINTING={p} X={x} Y={y} Z={z} SWIPE={s}


[gcode_macro _T]
gcode:
    {% if params.T is defined %}
        {% set idex_mode = '' %}
        {% if printer["dual_carriage"] is defined %}
            {% set idex_mode = printer["dual_carriage"].carriage_1|lower %}
        {% endif %}
        {% if idex_mode != "copy" and idex_mode != "mirror" %}
            {% set act_t = 0 if idex_mode == 'primary' else 1 %}
            {% set new_t = params.T|int %}
            {% set act_extruder = 'extruder%s' % ('' if new_t == 0 else new_t) %}  
            {% if new_t != act_t or printer.toolhead.extruder != act_extruder %} 

                M118 T{new_t}
                M220 S100                           # reset any speed override from the purge tower

                # swap part cooling fans
                {% set fan_speed = printer["fan_generic fan_%s" % printer.toolhead.extruder].speed %}
                {% set sync_fans = printer["gcode_macro RatOS"].toolchange_sync_fans|default(0)|int %}
                {% if fan_speed > 0 %}
                    SET_FAN_SPEED FAN=fan_extruder SPEED={fan_speed if (new_t == 0 or sync_fans == 1) else 0}
                    SET_FAN_SPEED FAN=fan_extruder1 SPEED={fan_speed if (new_t == 1 or sync_fans == 1) else 0}
                    # Update core Klipper's fan speed to the fan speed of the active toolhead
                    # Only do this if you have a sacrificial [fan] section
                    M106.1 S{fan_speed}
                {% endif %}

                {% set printing = params.PRINTING|default(0)|int %}
                {% set z_hop = params.Z|default(0.0)|float %}
                {% set act_z = printer.toolhead.position.z|float %}
                {% set new_x = params.X|default(-1)|float %}
                {% set new_y = params.Y|default(-1)|float %}
                {% set swipe = params.SWIPE|default(1)|int %}
                {% if "xyz" not in printer.toolhead.homed_axes %}
                    {% set swipe = 0 %}
                {% endif %}

                # get z-hop
                {% set def_t = printer["gcode_macro RatOS"].default_toolhead|int %}  
                {% if new_t != def_t %}
                    {% set svv = printer.save_variables.variables %}
                    {% set act_z = z_hop - svv.zoffset %}
                {% endif %}
                {% if z_hop > act_z %}
                    {% set z_hop = z_hop - act_z %}
                {% endif %}

                # change toolhead
                _TOOLCHANGE T={new_t} X={new_x} Y={new_y} PRINTING={printing} SWIPE={swipe} Z_HOP={z_hop}

                # set input shaper
                {% set shaper_x_freq = printer["gcode_macro RatOS"].shaper_x_freq %}
                {% set shaper_y_freq = printer["gcode_macro RatOS"].shaper_y_freq %}
                {% set shaper_x_type = printer["gcode_macro RatOS"].shaper_x_type %}
                {% set shaper_y_type = printer["gcode_macro RatOS"].shaper_y_type %}
                SET_INPUT_SHAPER SHAPER_FREQ_X={(shaper_x_freq[new_t]|float)} SHAPER_FREQ_Y={(shaper_y_freq[new_t]|float)} SHAPER_TYPE_X={(shaper_x_type[new_t]|lower)} SHAPER_TYPE_Y={(shaper_y_type[new_t]|lower)}

                G90                                             # absolute positioning

            {% endif %}
        {% endif %}
    {% endif %}


[gcode_macro _SET_OFFSET]
gcode:
    # parameters 
    {% set t = params.T|int %}  
    {% set svv = printer.save_variables.variables %}

    # set offset
    {% if "xyz" in printer.toolhead.homed_axes %}
        {% if svv.applied_offset != t %}
            {% if t != printer["gcode_macro RatOS"].default_toolhead|int %}
                SET_GCODE_OFFSET X_ADJUST={(svv.xoffset)} Y_ADJUST={(svv.yoffset)} 
                SET_GCODE_OFFSET Z_ADJUST={(svv.zoffset)} MOVE={0 if (params.SWIPE|default(0)|int == 1) else 1}
            {% else %}
                SET_GCODE_OFFSET X_ADJUST={(0-svv.xoffset)} Y_ADJUST={(0-svv.yoffset)} 
                SET_GCODE_OFFSET Z_ADJUST={(0-svv.zoffset)} MOVE={0 if (params.SWIPE|default(0)|int == 1) else 1}
            {% endif %}
            SAVE_VARIABLE VARIABLE=applied_offset VALUE={t}
        {% endif %}
    {% endif %}


[delayed_gcode _INIT_TOOLHEADS]
initial_duration: 0.1
gcode:
    {% if printer["gcode_macro RatOS"].default_toolhead is defined %}
        # ratos config 
        {% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|int %}

        # save variable
        {% set svv = printer.save_variables.variables %}
        SAVE_VARIABLE VARIABLE=applied_offset VALUE={default_toolhead}

        # IDEX default mode
        {% if printer["dual_carriage"] is defined %}
            IDEX_SINGLE
        {% endif %}
    {% endif %}


#############################################################################################################
# 
# Toolhead Parking
# 
#############################################################################################################

[gcode_macro _TOOLCHANGE]
gcode:
    {% set idex_mode = printer["dual_carriage"].carriage_1|lower %}
    {% set nozzle_wipe = printer["gcode_macro RatOS"].toolchange_nozzle_wipe|default(0)|int %}
    {% set nozzle_wipe_move = printer["gcode_macro RatOS"].toolchange_nozzle_wipe_moves %}
    {% set speed = printer["gcode_macro RatOS"].toolchange_travel_speed %}
    {% set printable_x = printer["gcode_macro RatOS"].printable_x %}
    {% set printable_center = (printable_x[1] - printable_x[0]) / 2 %}
    {% set acceleration = printer["gcode_macro RatOS"].toolchange_travel_accel %}
    {% set parking_position = printer["gcode_macro RatOS"].parking_position %}
    {% set printing = params.PRINTING|default(0)|int %}
    {% set act_t = 0 if idex_mode=='primary' else 1 %}
    {% set new_t = params.T|default(-1)|int %}
    {% set new_x = params.X|default(-1.0)|float %}
    {% set new_y = params.Y|default(-1.0)|float %}
    {% set svv = printer.save_variables.variables %}
    {% set swipe = params.SWIPE|default(1)|int %}
    {% set z_hop = params.Z_HOP|default(0.0)|float %}

    # change toolhead
    {% if printing==0 and swipe==0 %}

        # park toolhead
        {% if "x" in printer.toolhead.homed_axes %}
            G1 X{parking_position[act_t]} F{(speed*60)}
        {% endif %}

        # activate new extruder
        ACTIVATE_EXTRUDER EXTRUDER=extruder{'' if new_t==0 else new_t}

        # activate new carriage and offset
        SET_DUAL_CARRIAGE CARRIAGE={(0 if new_t==1 else 1)}
        _SET_OFFSET T={new_t}

    {% else %}

        G90         # absolute positioning

        # set toolchange acceleration
        {% set max_accel = printer.toolhead.max_accel|float %}
        {% set square_corner_velocity = printer.toolhead.square_corner_velocity|float %}
        SET_VELOCITY_LIMIT ACCEL={acceleration} ACCEL_TO_DECEL={acceleration} SQUARE_CORNER_VELOCITY=20

        # manual tool switching, bring new tool to the printable center
        {% if printing==0 and swipe==1 %}
            {% set new_x = printable_center %}
            {% set new_y = printer.toolhead.position.y %}
        {% endif %}

        # # NOT TESTED YET
        # # in print tool switching, but without post processing plugin
        # {% if printing==1 and swipe==1 and (new_x<0 or new_y<0) %}
        #     # we could do nothing and just use a classic toolchange
        #     # but for a small enough object a swipe toolchange makes sense, even if we dont know the next XY coordinates
        #     {% if printer["gcode_macro START_PRINT"].mesh_area is defined %}
        #         {% set mesh_area = printer["gcode_macro START_PRINT"].mesh_area %}
        #         {% if mesh_area[0]>=0 and mesh_area[1]>=0 and mesh_area[2]>=0 and mesh_area[3]>=0 %}
        #             # adaptive bed mesh available, make sure the mesh area is maximum a 3rd of the printable area
        #             {% if (mesh_area[1] - mesh_area[0]) < ((printable_x[1] - printable_x[0]) / 3) %}
        #                 {% if (mesh_area[3] - mesh_area[2]) < ((printable_y[1] - printable_y[0]) / 3) %}
        #                     # bring new tool to the center of the mesh area
        #                     {% set new_x = mesh_area[0] + ((mesh_area[1] - mesh_area[0]) / 2) %}
        #                     {% set new_y = mesh_area[2] + ((mesh_area[3] - mesh_area[2]) / 2) %}
        #                 {% endif %}
        #             {% endif %}
        #         {% endif %}
        #     {% endif %}
        # {% endif %}

        {% if new_x < 0 or new_y < 0 %}     
            # park the active toolhead and activate new toolhead without moving it

            # z-hop before parking
            {% if printing==1 %}
                _ZHOP_BEFORE_TOOLCHANGE Z={z_hop} T={new_t}
            {% endif %}

            # wipe nozzle
            {% if nozzle_wipe == 1 and new_t == 0 and printing == 1 %}
                {% set t0_act_x = parking_position[new_t] %}
                SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
                G1 X{t0_act_x+nozzle_wipe_move[0]} F{(speed*60)}
                G1 X{t0_act_x}+nozzle_wipe_move[1] F{(speed*60)}
                G1 X{t0_act_x+nozzle_wipe_move[0]} F{(speed*60)}
                G1 X{t0_act_x} F{(speed*60)}
                SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
            {% elif nozzle_wipe == 1 and new_t == 1 and printing == 1 %}
                {% set t1_act_x = parking_position[new_t] %}
                SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
                G1 X{t1_act_x-nozzle_wipe_move[0]} F{(speed*60)}
                G1 X{t1_act_x-nozzle_wipe_move[1]} F{(speed*60)}
                G1 X{t1_act_x-nozzle_wipe_move[0]} F{(speed*60)}
                G1 X{t1_act_x} F{(speed*60)}
                SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
            {% endif %}

            # park toolhead
            {% if "x" in printer.toolhead.homed_axes %}
                G1 X{parking_position[act_t]} F{(speed*60)}
            {% endif %}

            # extrude after parking
            {% if printing==1 %}
                _EXTRUDE T={new_t}
            {% endif %}

            # activate new extruder
            ACTIVATE_EXTRUDER EXTRUDER=extruder{'' if new_t==0 else new_t}

            # activate new carriage and offset
            SET_DUAL_CARRIAGE CARRIAGE={(0 if new_t==1 else 1)}
            _SET_OFFSET T={new_t}

        {% else %}                          
            # swipe the toolheads
            {% if "xyz" in printer.toolhead.homed_axes %}

                # z-hop before toolchange
                {% if printing==1 %}
                    _ZHOP_BEFORE_TOOLCHANGE Z={z_hop} T={new_t} SYNC=1
                {% endif %}

                {% if new_t == 0 %}
                    # get values
                    {% set new_y = new_y + svv.yoffset|float %}
                    {% set t0_act_x = parking_position[0] %}
                    {% set t1_act_x = printer.toolhead.position.x|float %}
                    {% set t0_new_x = new_x + svv.xoffset|float %}
                    {% set t1_new_x = parking_position[1] %}
                    {% set t0_distance = t0_new_x - t0_act_x %}
                    {% set t1_distance = t1_new_x - t1_act_x %}

                    # make sure T0 is in its correct parking position
                    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
                    G1 X{t0_act_x} F{(speed*60)}

                    # wipe T0 
                    {% if nozzle_wipe == 1 and printing == 1 %}
                        G1 X{t0_act_x+nozzle_wipe_move[0]} F{(speed*60)}
                        G1 X{t0_act_x+nozzle_wipe_move[1]} F{(speed*60)}
                        G1 X{t0_act_x+nozzle_wipe_move[0]} F{(speed*60)}
                        G1 X{t0_act_x} F{(speed*60)}
                    {% endif %}

                    {% if t0_distance >= t1_distance %}
                        # copy move
                        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
                        G1 X{t1_new_x} Y{new_y} F{(speed*60)}

                        # move T0 
                        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
                        _SET_OFFSET T=0 SWIPE=1
                        G1 X{t0_new_x} F{(speed*60)}

                    {% elif t0_distance < t1_distance %}
                        # copy move
                        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
                        G1 X{t1_new_x - (t1_distance - t0_distance)} Y{new_y} F{(speed*60)}

                        # park T1
                        SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
                        G1 X{t1_new_x} F{(speed*60)}

                        # move T0 
                        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
                        _SET_OFFSET T=0 SWIPE=1
                        G1 X{t0_new_x} F{(speed*60)}

                    {% endif %}

                {% elif new_t == 1 %}
                    # get values
                    {% set new_y = new_y - svv.yoffset|float %}
                    {% set t0_act_x = printer.toolhead.position.x|float %}
                    {% set t1_act_x = parking_position[1] %}
                    {% set t0_new_x = parking_position[0] %}
                    {% set t1_new_x = new_x - svv.yoffset|float %}
                    {% set t0_distance = t0_act_x - t0_new_x %}
                    {% set t1_distance = t1_act_x - t1_new_x %}

                    # make sure T1 is in its correct parking position
                    SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
                    G1 X{t1_act_x} F{(speed*60)}

                    # wipe T1
                    {% if nozzle_wipe == 1 and printing == 1 %}
                        G1 X{t1_act_x-nozzle_wipe_move[0]} F{(speed*60)}
                        G1 X{t1_act_x-nozzle_wipe_move[1]} F{(speed*60)}
                        G1 X{t1_act_x-nozzle_wipe_move[0]} F{(speed*60)}
                        G1 X{t1_act_x} F{(speed*60)}
                    {% endif %}

                    {% if t0_distance >= t1_distance %}
                        # copy move
                        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
                        G1 X{t1_new_x} Y{new_y} F{(speed*60)}

                        # move T0
                        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
                        G1 X{t0_new_x} F{(speed*60)}

                        # move T1
                        SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
                        _SET_OFFSET T=1 SWIPE=1
                        G1 X{t1_new_x} F{(speed*60)}

                    {% elif t0_distance < t1_distance %}
                        # copy move
                        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
                        G1 X{t1_act_x - (t0_act_x - t0_new_x)} Y{new_y} F{(speed*60)}

                        # move T1
                        SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
                        _SET_OFFSET T=1 SWIPE=1
                        G1 X{t1_new_x} F{(speed*60)}

                    {% endif %}
                {% endif %}

                # activate new extruder
                ACTIVATE_EXTRUDER EXTRUDER=extruder{'' if new_t==0 else new_t}

                # z-drop after toolchange
                {% if printing==1 %}
                    _ZDROP_AFTER_TOOLCHANGE Z={z_hop} T={new_t} SYNC=1
                {% endif %}

            {% else %}
                # activate new extruder
                ACTIVATE_EXTRUDER EXTRUDER=extruder{'' if new_t==0 else new_t}

                # printer is not homed, activate the new carriage and offset
                SET_DUAL_CARRIAGE CARRIAGE={(0 if new_t==1 else 1)}
                _SET_OFFSET T={new_t}

            {% endif %}
        {% endif %}

        # reset acceleration
        SET_VELOCITY_LIMIT ACCEL={max_accel} ACCEL_TO_DECEL={(max_accel / 2)} SQUARE_CORNER_VELOCITY={square_corner_velocity}

    {% endif %}


[gcode_macro _ZHOP_BEFORE_TOOLCHANGE]
gcode:
    {% set t = params.T|int %}
    {% set sync = params.SYNC|default(0)|int %}
    {% set gcode_zhop = params.Z|default(0.0)|float %}
    {% set config_zhop = printer["gcode_macro RatOS"].toolchange_zhop|default(0.4)|float %}
    {% set speed = printer["gcode_macro RatOS"].toolchange_zspeed|default(15)|float %}
    {% set feedrate = printer["gcode_macro RatOS"].toolchange_feedrate %}
    {% set combined_zhop = printer["gcode_macro RatOS"].toolchange_combined_zhop|default(0)|int %}
    {% set m400 = printer["gcode_macro RatOS"].toolchange_m400|default(0)|int %}
    {% set e = printer["gcode_macro RatOS"].toolchange_retraction %}
    {% set z = config_zhop + gcode_zhop %}

    G91                         # relative positioning
    M82                         # absolute extrusion
    G92 E0                      # reset extrusion distance

    # snyc extruders
    {% if sync == 1 and t == 0 %}
        SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder1
    {% elif sync == 1 and t == 1 %}
        SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder
    {% endif %}

    # z-hop
    {% if combined_zhop == 1 %}
        G1 Z+{z} E-{e[t]} F{speed * 60}
    {% else %}
        G1 Z+{z} F{speed * 60}
        G1 E-{e[t]} F{feedrate[t]}
    {% endif %}

    # wait for movements
    {% if m400 == 1 %}
        M400
    {% endif %}

    # unsync extruder
    {% if sync == 1 and t == 0 %}
        SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder
    {% elif sync == 1 and t == 1 %}
        SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1
    {% endif %}

    G90                         # absolute positioning
    G92 E0                      # reset extrusion distance

    # Set extrusion mode based on user configuration
    {% if printer["gcode_macro RatOS"].relative_extrusion|lower == 'true' %}
        M83
    {% else %}
        M82
    {% endif %}


[gcode_macro _ZDROP_AFTER_TOOLCHANGE]
gcode:
    {% set t = params.T|int %}
    {% set sync = params.SYNC|default(0)|int %}
    {% set gcode_zhop = params.Z|default(0.0)|float %}
    {% set config_zhop = printer["gcode_macro RatOS"].toolchange_zhop|default(0.4)|float %}
    {% set speed = printer["gcode_macro RatOS"].toolchange_zspeed|default(15)|float %}
    {% set feedrate = printer["gcode_macro RatOS"].toolchange_feedrate %}
    {% set combined_zhop = printer["gcode_macro RatOS"].toolchange_combined_zhop|default(0)|int %}
    {% set m400 = printer["gcode_macro RatOS"].toolchange_m400|default(0)|int %}
    {% set e = printer["gcode_macro RatOS"].toolchange_extrusion %}
    {% set z = config_zhop + gcode_zhop %}

    G91                         # relative positioning
    M82                         # absolute extrusion
    G92 E0                      # reset extrusion distance

    # snyc extruders
    {% if sync == 1 and t == 0 %}
        SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder
    {% elif sync == 1 and t == 1 %}
        SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder1
    {% endif %}

    # z-drop
    {% if combined_zhop == 0 %}
        G1 Z-{z} E{e[t]} F{speed * 60}
    {% else %}
        G1 Z-{z} F{speed * 60}
        G1 E{e[t]} F{feedrate[t]}
    {% endif %}

    # wait for movements
    {% if m400 == 1 %}
        M400
    {% endif %}

    # unsync extruder
    {% if sync == 1 and t == 0 %}
        SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1
    {% elif sync == 1 and t == 1 %}
        SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder
    {% endif %}

    G90                         # absolute positioning
    G92 E0                      # reset extrusion distance

    # Set extrusion mode based on user configuration
    {% if printer["gcode_macro RatOS"].relative_extrusion|lower == 'true' %}
        M83
    {% else %}
        M82
    {% endif %}


[gcode_macro _EXTRUDE]
gcode:
    {% set t = params.T|int %}
    {% set e = printer["gcode_macro RatOS"].toolchange_extrusion %}
    {% set feedrate = printer["gcode_macro RatOS"].toolchange_feedrate %}
    {% set m400 = printer["gcode_macro RatOS"].toolchange_m400|default(0)|int %}

    G91                             # relative positioning
    M82                             # absolute extrusion
    G92 E0                          # reset extrusion distance
    G1 E{e[t]} F{feedrate[t] * 60}  # retract
    G90                             # absolute positioning
    G92 E0                          # reset extrusion distance

    # wait for movements
    {% if m400 == 1 %}
        M400
    {% endif %}

    # Set extrusion mode based on user configuration
    {% if printer["gcode_macro RatOS"].relative_extrusion|lower == 'true' %}
        M83
    {% else %}
        M82
    {% endif %}


[gcode_macro PARK_TOOLHEAD]
gcode:
    # get IDEX mode
    {% set idex_mode = 'none' %}
    {% if printer["dual_carriage"] is defined %}
        {% set idex_mode = printer["dual_carriage"].carriage_1|lower %}
    {% endif %}
    {% set act_t = 0 if idex_mode=='primary' else 1 %}

    # ratos config 
    {% set speed = printer["gcode_macro RatOS"].toolchange_travel_speed %}
    {% set acceleration = printer["gcode_macro RatOS"].toolchange_travel_accel %}
    {% set home = printer["gcode_macro RatOS"].parking_position[act_t] %}

    # park toolhead
    {% if idex_mode != "copy" and idex_mode != "mirror" and 'x' in printer.toolhead.homed_axes %}
        SAVE_GCODE_STATE NAME=_PARK_TOOLHEAD
        G90                                                             # absolute positioning
        SET_VELOCITY_LIMIT ACCEL={acceleration} ACCEL_TO_DECEL={(acceleration/2)}
        G1 X{home} F{(speed*60)}                                        # move to parking position
        SET_VELOCITY_LIMIT ACCEL={printer.toolhead.max_accel} ACCEL_TO_DECEL={(printer.toolhead.max_accel/2)}
        M400                                                            # wait for movements
        RESTORE_GCODE_STATE NAME=_PARK_TOOLHEAD 
    {% endif %}


# this fixes an superslicer issue
# only the currently active extruders temp got changed after the first layer.
# call this from the slicers change layer custom gcode 
[gcode_macro _LAYER_CHANGE]
variable_t: 0
variable_layer_number: 1                  
variable_both_toolheads: 0                 
variable_extruder_other_layer_temp: 0     
variable_extruder_other_layer_temp_1: 0   
gcode:
    {% if printer["gcode_macro _LAYER_CHANGE"].layer_number is defined %}
        {% set layer_number = printer["gcode_macro _LAYER_CHANGE"].layer_number|int %}
        {% if printer["gcode_macro _LAYER_CHANGE"].extruder_other_layer_temp is defined %}
            {% if layer_number == 2 %}
                {% set t = printer["gcode_macro _LAYER_CHANGE"].t|int %}
                {% set extruder_other_layer_temp = printer["gcode_macro _LAYER_CHANGE"].extruder_other_layer_temp|float %}
                {% set extruder_other_layer_temp_1 = printer["gcode_macro _LAYER_CHANGE"].extruder_other_layer_temp_1|float %}
                {% if t==0 or printer["gcode_macro _LAYER_CHANGE"].both_toolheads|default(1)|int==1 %}
                    M104 S{extruder_other_layer_temp} T0
                {% endif %}
                {% if t==1 or printer["gcode_macro _LAYER_CHANGE"].both_toolheads|default(1)|int==1 %}
                    M104 S{extruder_other_layer_temp_1} T1
                {% endif %}
            {% endif %}
        {% endif %}
        SET_GCODE_VARIABLE MACRO=_LAYER_CHANGE VARIABLE=layer_number VALUE={layer_number + 1}
    {% endif %}


#############################################################################################################
# 
# Toolhead Fan Control
# 
#############################################################################################################

[gcode_macro M106]
# Only rename_existing if you have a sacrificial [fan] section
rename_existing: M106.1
# The variable that controls fan speed swopping if not specifying P parameter
# -1 means the control is disabled, a value of 0-1 is the requested fan speed.
# Access via {printer["gcode_macro M106"].swap_speed}
variable_swap_speed: -1
gcode:
    # parameters
    {% set s = [[params.S|default(255)|int, 255]|min, 0]|max %}
    {% set p = params.P|default(-1)|int %}
    {% set speed = s / 255 %}

    # get IDEX mode
    {% set idex_mode = 'none' %}
	{% if printer["dual_carriage"] is defined %}
		{% set idex_mode = printer["dual_carriage"].carriage_1|lower %}
	{% endif %}
    {% set t = 0 if idex_mode=='primary' else 1 %}
    {% set sync_fans = printer["gcode_macro RatOS"].toolchange_sync_fans|default(0)|int %}
    {% if idex_mode == "copy" or idex_mode == "mirror" %}
        {% set sync_fans = 1 %}
	{% endif %}

    # Set speed to -1 by default
    SET_GCODE_VARIABLE MACRO=M106 VARIABLE=swap_speed VALUE=-1

    # Set speed
    {% if p == -1 %}
        # Set current active extruder fan
        {% if speed == 0 %}
            # Always turn off all fans if S0 is specified without a specific fan
            SET_FAN_SPEED FAN=fan_extruder SPEED={speed}
            SET_FAN_SPEED FAN=fan_extruder1 SPEED={speed}
        {% else %}
            # Opt into fan speed swop control
            SET_GCODE_VARIABLE MACRO=M106 VARIABLE=swap_speed VALUE={speed}
            SET_FAN_SPEED FAN=fan_extruder SPEED={(speed if (t == 0 or sync_fans == 1) else 0)}
            SET_FAN_SPEED FAN=fan_extruder1 SPEED={(speed if (t == 1 or sync_fans == 1) else 0)}
        {% endif %}
    {% else %}
        # Set specified active extruder fan
        SET_FAN_SPEED FAN=fan_extruder SPEED={speed if i == p else 0}
        SET_FAN_SPEED FAN=fan_extruder1 SPEED={speed if i == p else 0}
    {% endif %}

    # Update core Klipper's fan speed
    # Only do this if you have a sacrificial [fan] section
    M106.1 S{s}


[gcode_macro M107]
rename_existing: M107.1
gcode:
    {% set p = params.P|default(-1)|int %}
    M106 S0 P{p}


#############################################################################################################
# 
# Idex Calibration Macros
# 
#############################################################################################################

# Configure this to draw 2 line segments perpendicular to the dual_carraige axis
# that meet in the middle of the bed. Both lines should have the same coordinate
# on the axis of the dual_carraige. If they don't print inline, adjust your endstop
# settings.
[gcode_macro set_separation]
gcode:
    {% set svv = printer.save_variables.variables %}

    {% set oldX = svv.xoffset|float %}
    {% set oldY = svv.yoffset|float %}
    {% set oldZ = svv.zoffset|float %}

    {% if params.X is defined %}
        SAVE_VARIABLE VARIABLE=xoffset VALUE={ params.X|float }
    {% endif %}

    {% if params.Y is defined %}
        SAVE_VARIABLE VARIABLE=yoffset VALUE={ params.Y|float }
    {% endif %}

    {% if params.Z is defined %}
        SAVE_VARIABLE VARIABLE=zoffset VALUE={ params.Z|float }
    {% endif %}

    {% if params.X_ADJUST is defined %}
        {% set newX = params.X_ADJUST|float + oldX %}
        SAVE_VARIABLE VARIABLE=xoffset VALUE={ newX|float }
    {% endif %}

    {% if params.Y_ADJUST is defined %}
        {% set newY = params.Y_ADJUST|float + oldY %}
        SAVE_VARIABLE VARIABLE=yoffset VALUE={ newY|float }
    {% endif %}

    {% if params.Z_ADJUST is defined %}
        {% set newZ = params.Z_ADJUST|float + oldZ %}
        SAVE_VARIABLE VARIABLE=yoffset VALUE={ newZ|float }
    {% endif %}


[gcode_macro calibrate_separation]
gcode:
    {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}

    MAYBE_HOME
    G90
    M83

    _T1
    PRIME_BLOB
    G1 Z2 F6000
    G1 X150 Y148 F{speed}
    G1 Z.3 F4800
    G1 Y100 E3 F500
    G1 Z2 F6000
    G1 X148 Y150 F{speed}
    G1 Z.3 F4800
    G1 X100 E3 F500

    _T0
    PRIME_BLOB
    G1 Z2 F6000
    G1 X150 Y152 F{speed}
    G1 Z.3 F4800
    G1 Y200 E3 F500
    G1 Z2 F6000
    G1 X152 Y150 F{speed}
    G1 Z.3 F4800
    G1 X200 E3 F500

    {% if printer["gcode_macro RatOS"].relative_extrusion|lower == 'true' %}
        M83
    {% else %}
        M82
    {% endif %}
    T{printer["gcode_macro RatOS"].default_toolhead|int}
