############################################################################################################
# 
# Toolhead Selection
# 
#############################################################################################################
[gcode_macro T0]
variable_active: False          # used for mainsail UI
variable_color: ""              # used for mainsail UI
gcode:
    {% set p = params.P|default(0)|int %}
    {% set x = params.X|default(-1.0)|float %}
    {% set y = params.Y|default(-1.0)|float %}
    {% set z = params.Z|default(0.0)|float %}
    {% set s = params.S|default(1)|int %}
    _T T=0 PRINTING={p} X={x} Y={y} Z={z} SWIPE={s}


[gcode_macro T1]
variable_active: False          # used for mainsail UI
variable_color: ""              # used for mainsail UI
gcode:
    {% set p = params.P|default(0)|int %}
    {% set x = params.X|default(-1.0)|float %}
    {% set y = params.Y|default(-1.0)|float %}
    {% set z = params.Z|default(0.0)|float %}
    {% set s = params.S|default(1)|int %}
    _T T=1 PRINTING={p} X={x} Y={y} Z={z} SWIPE={s}


[gcode_macro _T]
gcode:
    {% if params.T is defined %}
        {% set idex_mode = '' %}
        {% if printer["dual_carriage"] is defined %}
            {% set idex_mode = printer["dual_carriage"].carriage_1|lower %}
            {% if "xyz" not in printer.toolhead.homed_axes and (idex_mode == "copy" or idex_mode == "mirror") %}
                IDEX_SINGLE
                {% set idex_mode = 'reset' %}
            {% endif %}
        {% endif %}
        {% if idex_mode != "copy" and idex_mode != "mirror" %}
            {% set act_t = 1 if idex_mode == 'primary' else 0 %}
            {% set new_t = params.T|int %}
            {% set act_extruder = 'extruder%s' % ('' if new_t == 0 else new_t) %}  
            {% if new_t != act_t or printer.toolhead.extruder != act_extruder or idex_mode == 'reset' %} 

                M118 T{new_t}                       # echo
                M220 S100                           # reset any speed override from the purge tower

                # parameters
                {% set printing = params.PRINTING|default(0)|int %}
                {% set z_hop = params.Z|default(0.0)|float %}
                {% set new_x = params.X|default(-1)|float %}
                {% set new_y = params.Y|default(-1)|float %}
                {% set swipe = params.SWIPE|default(1)|int %}
                {% if "xyz" not in printer.toolhead.homed_axes %}
                    {% set swipe = 0 %}
                {% endif %}

                # swap part cooling fans
                {% set fan_speed = printer["fan_generic fan_%s" % printer.toolhead.extruder].speed %}
                {% set sync_fans = printer["gcode_macro RatOS"].toolchange_sync_fans|default(0)|int %}
                {% if fan_speed > 0 %}
                    SET_FAN_SPEED FAN=fan_extruder SPEED={fan_speed if (new_t == 0 or sync_fans == 1) else 0}
                    SET_FAN_SPEED FAN=fan_extruder1 SPEED={fan_speed if (new_t == 1 or sync_fans == 1) else 0}
                    # Update core Klipper's fan speed to the fan speed of the active toolhead
                    # Only do this if you have a sacrificial [fan] section
                    M106.1 S{fan_speed}
                {% endif %}

                # change toolhead
                _TOOLCHANGE T={new_t} X={new_x} Y={new_y} PRINTING={printing} SWIPE={swipe} Z_HOP={z_hop}

                # set input shaper
                {% set shaper_x_freq = printer["gcode_macro RatOS"].shaper_x_freq %}
                {% set shaper_y_freq = printer["gcode_macro RatOS"].shaper_y_freq %}
                {% set shaper_x_type = printer["gcode_macro RatOS"].shaper_x_type %}
                {% set shaper_y_type = printer["gcode_macro RatOS"].shaper_y_type %}
                SET_INPUT_SHAPER SHAPER_FREQ_X={(shaper_x_freq[new_t]|float)} SHAPER_FREQ_Y={(shaper_y_freq[new_t]|float)} SHAPER_TYPE_X={(shaper_x_type[new_t]|lower)} SHAPER_TYPE_Y={(shaper_y_type[new_t]|lower)}

                # update mainsail UI
                SET_GCODE_VARIABLE MACRO=T0 VARIABLE=active VALUE={True if new_t==0 else False}
                SET_GCODE_VARIABLE MACRO=T1 VARIABLE=active VALUE={True if new_t==1 else False}

                G90                                             # absolute positioning

            {% endif %}
        {% endif %}
    {% endif %}


[gcode_macro _SET_OFFSET]
gcode:
    # parameters 
    {% set t = params.T|int %}  
    {% set move = params.MOVE|default(0)|int %}  

    # echo
    M118 _SET_OFFSET T={t} MOVE={move}

    # ratos variables file
    {% set svv = printer.save_variables.variables %}

    # config 
    {% set speed = printer["gcode_macro RatOS"].toolchange_travel_speed * 60 %}
    {% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}

    # set offset
    {% if "xyz" not in printer.toolhead.homed_axes %}
        {% set move = 0 %}  
    {% endif %}
    {% if svv.applied_offset != t %}
        {% if t != printer["gcode_macro RatOS"].default_toolhead|int %}
            SET_GCODE_OFFSET X_ADJUST={(svv.xoffset)} Y_ADJUST={(svv.yoffset)} MOVE={move} SPEED={speed}
            SET_GCODE_OFFSET Z_ADJUST={(svv.zoffset)} MOVE={move} SPEED={z_speed}
        {% else %}
            SET_GCODE_OFFSET X_ADJUST={(0-svv.xoffset)} Y_ADJUST={(0-svv.yoffset)} MOVE={move} SPEED={speed}
            SET_GCODE_OFFSET Z_ADJUST={(0-svv.zoffset)} MOVE={move} SPEED={z_speed}
        {% endif %}
        SAVE_VARIABLE VARIABLE=applied_offset VALUE={t}
        M118 toolhead offset applied for T{t}
    {% endif %}


[delayed_gcode _INIT_TOOLHEADS]
initial_duration: 0.1
gcode:
    {% if printer["dual_carriage"] is defined %}

        # config 
        {% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|int %}

        # ratos variables file
        {% set svv = printer.save_variables.variables %}
        SAVE_VARIABLE VARIABLE=applied_offset VALUE={default_toolhead}

        # activate IDEX default
        IDEX_SINGLE INIT=1

        # this is brutal, but better than colliding toolheads
        # inverted hybrid core-xy bugfix sanity check
        {% set inverted = False %}
        {% if printer.configfile.settings.hybrid_corexy.inverted is defined %}
            {% if printer.configfile.settings.hybrid_corexy.inverted|lower == 'true' %}
                {% set inverted = True %}
            {% endif %}
        {% endif %}
        {% if inverted == False %}
			{ action_emergency_stop("hybrid_corexy NOT INVERTED! Inverted hybrid core-xy bugfix not detected.") }
        {% endif %}

        # dual carriage safe distance sanity check
        {% if printer.configfile.settings.dual_carriage.safe_distance is defined %}
            {% if printer.configfile.settings.dual_carriage.safe_distance|float < 20 %}
                { action_emergency_stop("Dual carriage safe_distance too low! For EVA 3 set it to 68mm.") }
            {% endif %}
        {% else %}
            { action_emergency_stop("Dual carriage safe_distance not defined!") }
        {% endif %}

        # stepper min max position sanity check
        {% if printer.configfile.settings.dual_carriage.position_min|float < 0 %}
            { action_emergency_stop("dual_carriage position_min too low, set it to 0!") }
        {% endif %}
        {% if printer.configfile.settings.stepper_x.position_max|float != 200 %}
            {% if printer.configfile.settings.stepper_x.position_max|float != 300 %}
                {% if printer.configfile.settings.stepper_x.position_max|float != 400 %}
                    {% if printer.configfile.settings.stepper_x.position_max|float != 500 %}
                        { action_emergency_stop("stepper_x position_max seems to be wrong, set it to your max print width!") }
                    {% endif %}
                {% endif %}
            {% endif %}
        {% endif %}

    {% endif %}


[gcode_macro M84]
rename_existing: M84.1
gcode:
    {% if printer["dual_carriage"] is defined %}

        # idex mode 
        {% set idex_mode = printer["dual_carriage"].carriage_1|default('')|lower %}

        # config 
        {% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|int %}

        # reset applied toolhead offset index
        _SET_OFFSET T={default_toolhead} MOVE=0

        # reset offset
        SET_GCODE_OFFSET X=0 Y=0 Z=0 MOVE=0

    {% endif %}

    # turn motors off
    M84.1


[gcode_macro SET_PRESSURE_ADVANCE]
rename_existing: SET_PRESSURE_ADVANCE_BASE
gcode:
    # config 
    {% set idex_mode = printer["dual_carriage"].carriage_1|default('')|lower %}

    # extruder parameter
    {% set extruder = params.EXTRUDER|default('')|lower %}  
    {% set extruder = 'extruder' if extruder == '' else extruder %}  

    {% if printer[extruder] is defined %}

        # advance parameter
        {% set advance = params.ADVANCE|default(0.0)|float %}  
        {% set advance = printer[extruder].pressure_advance|float if advance == 0.0 else advance %}  

        # smooth time parameter
        {% set smooth_time = params.SMOOTH_TIME|default(0.0)|float %}  
        {% set smooth_time = printer[extruder].smooth_time|float if smooth_time == 0.0 else smooth_time %}  

        # set pressure advance
        {% if idex_mode == 'copy' or idex_mode == 'mirror' %}
            RESPOND MSG="sync pressure advance"
            RESPOND MSG="SET_PRESSURE_ADVANCE T0"
            SET_PRESSURE_ADVANCE_BASE EXTRUDER='extruder' ADVANCE={advance} SMOOTH_TIME={smooth_time}
            RESPOND MSG="SET_PRESSURE_ADVANCE T1"
            SET_PRESSURE_ADVANCE_BASE EXTRUDER='extruder1' ADVANCE={advance} SMOOTH_TIME={smooth_time}
        {% else %}
            SET_PRESSURE_ADVANCE_BASE EXTRUDER={extruder} ADVANCE={advance} SMOOTH_TIME={smooth_time}
        {% endif %}

    {% else %}
		RESPOND MSG="SET_PRESSURE_ADVANCE: Extruder {extruder} not found!"
    {% endif %}


#############################################################################################################
# 
# Toolhead Parking
# 
#############################################################################################################

[gcode_macro _TOOLCHANGE]
gcode:
    # parameters 
    {% set new_t = params.T|default(-1)|int %}
    {% set new_x = params.X|default(-1.0)|float %}
    {% set new_y = params.Y|default(-1.0)|float %}
    {% set swipe = params.SWIPE|default(1)|int %}
    {% set z_hop = params.Z_HOP|default(0.0)|float %}
    {% set printing = params.PRINTING|default(0)|int %}

    # echo 
    M118 _TOOLCHANGE T={new_t} X={new_x} Y={new_y} SWIPE={swipe} Z_HOP={z_hop}

    # ratos variables file
    {% set svv = printer.save_variables.variables %}

    # config
    {% set speed = printer["gcode_macro RatOS"].toolchange_travel_speed * 60 %}
    {% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
    {% set config_zhop = printer["gcode_macro RatOS"].toolchange_zhop|default(1.0)|float %}
    {% set center_x = printer.configfile.settings.stepper_x.position_max|float / 2 %}
    {% set acceleration = printer["gcode_macro RatOS"].toolchange_travel_accel %}
    {% set parking_position = printer["gcode_macro RatOS"].parking_position %}
    {% set speed = printer["gcode_macro RatOS"].toolchange_travel_speed * 60 %}
    {% set idex_mode = printer["dual_carriage"].carriage_1|lower %}
    {% set act_t = 1 if idex_mode=='primary' else 0 %}

    # change toolhead
    {% if printing==0 and swipe==0 %}

        # park toolhead
        {% if "xyz" in printer.toolhead.homed_axes %}
            G1 X{parking_position[act_t]} F{speed}
        {% endif %}

        # activate new carriage and offset
        SET_DUAL_CARRIAGE CARRIAGE={new_t} MODE=PRIMARY

        # set offset
        _SET_OFFSET T={new_t} MOVE={1 if "xyz" in printer.toolhead.homed_axes else 0}

        # activate new extruder
        ACTIVATE_EXTRUDER EXTRUDER=extruder{'' if new_t==0 else new_t}

    {% else %}
        # absolute positioning
        G90

        # set toolchange acceleration
        {% set max_accel = printer.toolhead.max_accel|float %}
        {% set square_corner_velocity = printer.toolhead.square_corner_velocity|float %}
        SET_VELOCITY_LIMIT ACCEL={acceleration} ACCEL_TO_DECEL={acceleration} SQUARE_CORNER_VELOCITY=20

        # manual tool switching, bring new tool to the printable center
        {% if printing==0 and swipe==1 and new_x<0 and new_y<0 %}
            {% set new_x = center_x %}
            {% set new_y = printer.gcode_move.gcode_position.y|float %}
        {% endif %}

        {% if new_x < 0 or new_y < 0 %}     
            # park the active toolhead and activate new toolhead without moving it

            # z-hop before parking
            _ZHOP_BEFORE_TOOLCHANGE Z_HOP={z_hop + config_zhop} T={new_t} PRINTING={printing}

            # park toolhead
            {% if "x" in printer.toolhead.homed_axes %}
                G1 X{parking_position[act_t]} F{speed}
            {% endif %}

            # # extrude after parking
            {% if printing==1 %}
                _EXTRUDE T={new_t}
            {% endif %}

            # activate new carriage and offset
            SET_DUAL_CARRIAGE CARRIAGE={new_t}
            _SET_OFFSET T={new_t} MOVE={1 if "xyz" in printer.toolhead.homed_axes else 0}

            # activate new extruder
            ACTIVATE_EXTRUDER EXTRUDER=extruder{'' if new_t==0 else new_t}

        {% else %}                       
            {% if "xyz" not in printer.toolhead.homed_axes %}
                # printer is not homed

                # activate the new carriage and offset
                SET_DUAL_CARRIAGE CARRIAGE={new_t}
                _SET_OFFSET T={new_t}

                # activate new extruder
                ACTIVATE_EXTRUDER EXTRUDER=extruder{'' if new_t==0 else new_t}

            {% else %}
                # swipe the toolheads

                # get current z-position
                {% set gcode_z = printer.gcode_move.gcode_position.z|float %}
                {% set toolhead_z = printer.toolhead.position.z|float %}

                {% if new_t == 0 %}
                    # get values
                    {% set t0_act_x = parking_position[0]|float %}
                    {% set t1_act_x = printer.toolhead.position.x|float %}
                    {% set t0_new_x = new_x %}
                    {% set t1_new_x = parking_position[1]|float %}
                    {% set t0_distance = t0_new_x - t0_act_x %}
                    {% set t1_distance = t1_new_x - t1_act_x %}

                    # calculate needed z-hop
                    {% set calc_z_hop = z_hop + config_zhop %}

                    # z-hop before toolchange
                    _ZHOP_BEFORE_TOOLCHANGE Z_HOP={calc_z_hop} T={new_t} SYNC=1 PRINTING={printing}

                    # make sure T0 is in its correct parking position
                    SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
                    G1 X{t0_act_x} F{speed}

                    {% if t0_distance >= t1_distance %}
                        # copy move
                        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
                        G1 X{t0_act_x + (t1_new_x - t1_act_x)} Y{new_y + svv.yoffset} F{speed}

                        # move T0 
                        SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
                        G1 X{t0_new_x + svv.xoffset} F{speed}

                    {% elif t0_distance < t1_distance %}
                        # copy move  
                        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
                        G1 X{t0_new_x + svv.xoffset} Y{new_y + svv.yoffset} F{speed}

                        # park T1
                        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
                        G1 X{t1_new_x} F{speed}

                        # move T0 
                        SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
                        G1 X{t0_new_x + svv.xoffset} F{speed}

                    {% endif %}

                    # Offset move
                    {% if svv.applied_offset != 0 %}
                        SET_GCODE_OFFSET X_ADJUST={(svv.xoffset)} Y_ADJUST={(svv.yoffset)} MOVE=0 SPEED={speed}
                        G1 X{t0_new_x} Y{new_y} F{speed}
                        SET_GCODE_OFFSET Z_ADJUST={(svv.zoffset)} MOVE=1 SPEED={z_speed}
                        SAVE_VARIABLE VARIABLE=applied_offset VALUE=0
                    {% endif %}

                    # calculate needed z-drop
                    {% set calc_z_drop = z_hop + config_zhop %}

                    # z-drop after toolchange
                    _ZDROP_AFTER_TOOLCHANGE Z_DROP={calc_z_drop} T={new_t} SYNC=1 PRINTING={printing}

                {% elif new_t == 1 %}
                    # get values
                    {% set t0_act_x = printer.toolhead.position.x|float %}
                    {% set t1_act_x = parking_position[1]|float %}
                    {% set t0_new_x = parking_position[0]|float %}
                    {% set t1_new_x = new_x %}
                    {% set t0_distance = t0_act_x - t0_new_x %}
                    {% set t1_distance = t1_act_x - t1_new_x %}

                    # calculate needed z-hop
                    {% set calc_z_hop = z_hop + config_zhop %}

                    # z-hop before toolchange
                    _ZHOP_BEFORE_TOOLCHANGE Z_HOP={calc_z_hop} T={new_t} SYNC=1 PRINTING={printing}

                    # make sure T1 is in its correct parking position
                    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
                    G1 X{t1_act_x} F{speed}

                    {% if t0_distance >= t1_distance %}
                        # copy move
                        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
                        G1 X{t0_act_x - (t1_act_x - t1_new_x) - svv.xoffset} Y{new_y - svv.yoffset} F{speed}

                        # park T0
                        SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
                        G1 X{t0_new_x - svv.xoffset} F{speed}

                        # move T1
                        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY

                    {% elif t0_distance < t1_distance %}
                        # copy move
                        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
                        G1 X{t0_new_x} Y{new_y - svv.yoffset} F{speed}

                        # move T1
                        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
                        G1 X{t1_new_x - svv.xoffset} F{speed}

                    {% endif %}

                    # offset move
                    {% if svv.applied_offset != 1 %}
                        SET_GCODE_OFFSET X_ADJUST={(0-svv.xoffset)} Y_ADJUST={(0-svv.yoffset)} MOVE=0 SPEED={speed}
                        G1 X{t1_new_x} Y{new_y} F{speed}
                        SET_GCODE_OFFSET Z_ADJUST={(0-svv.zoffset)} MOVE=1 SPEED={z_speed}
                        SAVE_VARIABLE VARIABLE=applied_offset VALUE=1
                        M118 toolhead offset applied for T1
                    {% endif %}

                    # calculate needed z-drop
                    {% set calc_z_drop = z_hop + config_zhop %}

                    # z-drop after toolchange
                    _ZDROP_AFTER_TOOLCHANGE Z_DROP={calc_z_drop} T={new_t} SYNC=1 PRINTING={printing}

                {% endif %}

                # activate new extruder
                ACTIVATE_EXTRUDER EXTRUDER=extruder{'' if new_t==0 else new_t}

            {% endif %}
        {% endif %}

        # reset acceleration
        SET_VELOCITY_LIMIT ACCEL={max_accel} ACCEL_TO_DECEL={(max_accel / 2)} SQUARE_CORNER_VELOCITY={square_corner_velocity}

    {% endif %}


[gcode_macro _ZHOP_BEFORE_TOOLCHANGE]
gcode:
    # parameters 
    {% set t = params.T|int %}
    {% set sync = params.SYNC|default(0)|int %}
    {% set printing = params.PRINTING|default(0)|int %}
    {% set z_hop = params.Z_HOP|default(0.0)|float %}

    # echo 
    M118 _ZHOP_BEFORE_TOOLCHANGE T={t} SYNC={sync} PRINTING={printing} Z_HOP={z_hop}

    # config
    {% set speed = printer["gcode_macro RatOS"].toolchange_zspeed|default(15)|float %}
    {% set feedrate = printer["gcode_macro RatOS"].toolchange_feedrate %}
    {% set combined_zhop = printer["gcode_macro RatOS"].toolchange_combined_zhop|default(0)|int %}
    {% set both_toolheads = printer["gcode_macro RatOS"].both_toolheads|default(1)|int %}
    {% set m400 = printer["gcode_macro RatOS"].toolchange_m400|default(0)|int %}
    {% set e = printer["gcode_macro RatOS"].toolchange_retraction %}

    G91                             # relative positioning
    M82                             # absolute extrusion
    G92 E0                          # reset extrusion distance

    # snyc extruders
    {% if sync == 1 and t == 0 and printing==1 and both_toolheads == 1 %}
        {% if printer['extruder'].can_extrude|lower == 'true' and printer['extruder1'].can_extrude|lower == 'true' %}
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder1
        {% endif %}
    {% elif sync == 1 and t == 1 and printing==1 and both_toolheads == 1 %}
        {% if printer['extruder'].can_extrude|lower == 'true' and printer['extruder1'].can_extrude|lower == 'true' %}
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder
        {% endif %}
    {% endif %}

    # z-hop
    {% if combined_zhop == 1 and printing==1 %}
        G1 Z+{z_hop} E-{e[t]} F{speed * 60}
    {% else %}
        G1 Z+{z_hop} F{speed * 60}
        {% if printing==1 %}
            G1 E-{e[t]} F{feedrate[t]}
        {% endif %}
    {% endif %}

    # wait for movements
    {% if m400 == 1 %}
        M400
    {% endif %}

    # unsync extruder
    {% if sync == 1 and t == 0 and printing==1 and both_toolheads == 1 %}
        {% if printer['extruder'].can_extrude|lower == 'true' and printer['extruder1'].can_extrude|lower == 'true' %}
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder
        {% endif %}
    {% elif sync == 1 and t == 1 and printing==1 and both_toolheads == 1 %}
        {% if printer['extruder'].can_extrude|lower == 'true' and printer['extruder1'].can_extrude|lower == 'true' %}
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1
        {% endif %}
    {% endif %}

    G90                             # absolute positioning
    G92 E0                          # reset extrusion distance

    # Set extrusion mode based on user configuration
    {% if printer["gcode_macro RatOS"].relative_extrusion|lower == 'true' %}
        M83
    {% else %}
        M82
    {% endif %}


[gcode_macro _ZDROP_AFTER_TOOLCHANGE]
gcode:
    # parameters 
    {% set t = params.T|int %}
    {% set sync = params.SYNC|default(0)|int %}
    {% set printing = params.PRINTING|default(0)|int %}
    {% set z_drop = params.Z_DROP|default(0.0)|float %}
    
    # echo
    M118 _ZDROP_AFTER_TOOLCHANGE T={t} SYNC={sync} PRINTING={printing} Z_DROP={z_drop}

    # config
    {% set speed = printer["gcode_macro RatOS"].toolchange_zspeed|default(15)|float %}
    {% set feedrate = printer["gcode_macro RatOS"].toolchange_feedrate %}
    {% set combined_zhop = printer["gcode_macro RatOS"].toolchange_combined_zhop|default(0)|int %}
    {% set both_toolheads = printer["gcode_macro RatOS"].both_toolheads|default(1)|int %}
    {% set m400 = printer["gcode_macro RatOS"].toolchange_m400|default(0)|int %}
    {% set e = printer["gcode_macro RatOS"].toolchange_extrusion %}

    G91                             # relative positioning
    M82                             # absolute extrusion
    G92 E0                          # reset extrusion distance

    # snyc extruders
    {% if sync == 1 and t == 0 and printing==1 and both_toolheads == 1 %}
        {% if printer['extruder'].can_extrude|lower == 'true' and printer['extruder1'].can_extrude|lower == 'true' %}
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder1
        {% endif %}
    {% elif sync == 1 and t == 1 and printing==1 and both_toolheads == 1 %}
        {% if printer['extruder'].can_extrude|lower == 'true' and printer['extruder1'].can_extrude|lower == 'true' %}
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder
        {% endif %}
    {% endif %}

    # z-drop
    {% if combined_zhop == 1 and printing==1 %}
        G1 Z-{z_drop} E{e[t]} F{speed * 60}
    {% else %}
        G1 Z-{z_drop} F{speed * 60}
        {% if printing==1 %}
            G1 E{e[t]} F{feedrate[t]}
        {% endif %}
    {% endif %}

    # wait for movements
    {% if m400 == 1 %}
        M400
    {% endif %}

    # unsync extruder
    {% if sync == 1 and t == 0 and printing == 1 and both_toolheads == 1 %}
        {% if printer['extruder'].can_extrude|lower == 'true' and printer['extruder1'].can_extrude|lower == 'true' %}
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder
        {% endif %}
    {% elif sync == 1 and t == 1 and printing == 1 and both_toolheads == 1 %}
        {% if printer['extruder'].can_extrude|lower == 'true' and printer['extruder1'].can_extrude|lower == 'true' %}
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1
        {% endif %}
    {% endif %}

    G90                             # absolute positioning
    G92 E0                          # reset extrusion distance

    # Set extrusion mode based on user configuration
    {% if printer["gcode_macro RatOS"].relative_extrusion|lower == 'true' %}
        M83
    {% else %}
        M82
    {% endif %}


[gcode_macro _EXTRUDE]
gcode:
    # parameters 
    {% set t = params.T|int %}

    # config
    {% set e = printer["gcode_macro RatOS"].toolchange_extrusion %}
    {% set feedrate = printer["gcode_macro RatOS"].toolchange_feedrate %}
    {% set m400 = printer["gcode_macro RatOS"].toolchange_m400|default(0)|int %}

    # extrude
    G91                             # relative positioning
    M82                             # absolute extrusion
    G92 E0                          # reset extrusion distance
    G1 E{e[t]} F{feedrate[t] * 60}  # retract
    G90                             # absolute positioning
    G92 E0                          # reset extrusion distance

    # wait for movements
    {% if m400 == 1 %}
        M400
    {% endif %}

    # Set extrusion mode based on user configuration
    {% if printer["gcode_macro RatOS"].relative_extrusion|lower == 'true' %}
        M83
    {% else %}
        M82
    {% endif %}


[gcode_macro PARK_TOOLHEAD]
gcode:
    # get IDEX mode
    {% set idex_mode = 'none' %}
    {% if printer["dual_carriage"] is defined %}
        {% set idex_mode = printer["dual_carriage"].carriage_1|lower %}
    {% endif %}
    {% set act_t = 1 if idex_mode=='primary' else 0 %}

    # config 
    {% set speed = printer["gcode_macro RatOS"].toolchange_travel_speed * 60 %}
    {% set acceleration = printer["gcode_macro RatOS"].toolchange_travel_accel %}
    {% set home = printer["gcode_macro RatOS"].parking_position %}

    # park toolhead
    {% if idex_mode != "copy" and idex_mode != "mirror" and 'x' in printer.toolhead.homed_axes %}
        SAVE_GCODE_STATE NAME=_PARK_TOOLHEAD
        G90                         # absolute positioning
        SET_VELOCITY_LIMIT ACCEL={acceleration} ACCEL_TO_DECEL={(acceleration/2)}

        # move both toolheads to parking position
        G1 X{home[act_t]} F{(speed)}                     
        SET_DUAL_CARRIAGE CARRIAGE={0 if act_t==1 else 1}
        G1 X{home[0 if act_t==1 else 1]} F{(speed)}    
        SET_DUAL_CARRIAGE CARRIAGE={act_t}

        SET_VELOCITY_LIMIT ACCEL={printer.toolhead.max_accel} ACCEL_TO_DECEL={(printer.toolhead.max_accel/2)}
        M400                        # wait for movements
        RESTORE_GCODE_STATE NAME=_PARK_TOOLHEAD 
    {% endif %}

# this fixes a superslicer issue
# only the currently active extruders temp got changed after the first layer.
# call this from the slicers change layer custom gcode 
[gcode_macro _LAYER_CHANGE]
variable_t: 0
variable_layer_number: 1                  
variable_extruder_other_layer_temp: 0     
variable_extruder_other_layer_temp_1: 0   
gcode:
    {% if printer["gcode_macro _LAYER_CHANGE"].layer_number is defined %}
        {% set layer_number = printer["gcode_macro _LAYER_CHANGE"].layer_number|int %}
        {% if printer["gcode_macro _LAYER_CHANGE"].extruder_other_layer_temp is defined %}
            {% if layer_number == 2 %}
                {% set t = printer["gcode_macro _LAYER_CHANGE"].t|int %}
                {% set extruder_other_layer_temp = printer["gcode_macro _LAYER_CHANGE"].extruder_other_layer_temp|float %}
                {% set extruder_other_layer_temp_1 = printer["gcode_macro _LAYER_CHANGE"].extruder_other_layer_temp_1|float %}
                {% if t==0 or printer["gcode_macro START_PRINT"].both_toolheads|default(1)|int==1 %}
                    M104 S{extruder_other_layer_temp} T0
                {% endif %}
                {% if t==1 or printer["gcode_macro START_PRINT"].both_toolheads|default(1)|int==1 %}
                    M104 S{extruder_other_layer_temp_1} T1
                {% endif %}
            {% endif %}
        {% endif %}
        SET_GCODE_VARIABLE MACRO=_LAYER_CHANGE VARIABLE=layer_number VALUE={layer_number + 1}
    {% endif %}


#############################################################################################################
# 
# Toolhead Fan Control
# 
#############################################################################################################

[gcode_macro M106]
# Only rename_existing if you have a sacrificial [fan] section
rename_existing: M106.1
# The variable that controls fan speed swopping if not specifying P parameter
# -1 means the control is disabled, a value of 0-1 is the requested fan speed.
# Access via {printer["gcode_macro M106"].swap_speed}
variable_swap_speed: -1
gcode:
    # parameters
    {% set s = [[params.S|default(255)|int, 255]|min, 0]|max %}
    {% set p = params.P|default(-1)|int %}
    {% set speed = s / 255 %}

    # get IDEX mode
    {% set idex_mode = printer["dual_carriage"].carriage_1|default('')|lower %}
    {% set t = 1 if idex_mode=='primary' else 0 %}
    {% set sync_fans = printer["gcode_macro RatOS"].toolchange_sync_fans|default(0)|int %}
    {% if idex_mode == "copy" or idex_mode == "mirror" %}
        {% set sync_fans = 1 %}
	{% endif %}

    # Set speed to -1 by default
    SET_GCODE_VARIABLE MACRO=M106 VARIABLE=swap_speed VALUE=-1

    # Set speed
    {% if p == -1 %}
        # Set current active extruder fan
        {% if speed == 0 %}
            # Always turn off all fans if S0 is specified without a specific fan
            SET_FAN_SPEED FAN=fan_extruder SPEED={speed}
            SET_FAN_SPEED FAN=fan_extruder1 SPEED={speed}
        {% else %}
            # Opt into fan speed swop control
            SET_GCODE_VARIABLE MACRO=M106 VARIABLE=swap_speed VALUE={speed}
            SET_FAN_SPEED FAN=fan_extruder SPEED={(speed if (t == 0 or sync_fans == 1) else 0)}
            SET_FAN_SPEED FAN=fan_extruder1 SPEED={(speed if (t == 1 or sync_fans == 1) else 0)}
        {% endif %}
    {% else %}
        # Set specified active extruder fan
        SET_FAN_SPEED FAN=fan_extruder SPEED={speed if t == p else 0}
        SET_FAN_SPEED FAN=fan_extruder1 SPEED={speed if t == p else 0}
    {% endif %}

    # Update core Klipper's fan speed
    # Only do this if you have a sacrificial [fan] section
    M106.1 S{s}


[gcode_macro M107]
rename_existing: M107.1
gcode:
    {% set p = params.P|default(-1)|int %}
    M106 S0 P{p}
