#############################################################################################################
# 
# Toolhead Selection
# 
#############################################################################################################
[gcode_macro T0]
gcode:
    _T T=0 PRINTING={params.PRINTING|default('0')|lower}


[gcode_macro T1]
gcode:
    _T T=1 PRINTING={params.PRINTING|default('0')|lower}


[gcode_macro _T]
gcode:
    {% if params.T is defined %}
        {% set t = params.T|int %}  
        {% if (printer.toolhead.extruder != ('extruder%s' % ('' if t==0 else t)))|lower == "true" %} 

            M118 T{t}

            # get printing state
            {% set is_homing = params.HOME|default(false) %}
            {% set is_printing = params.PRINTING|default('0')|lower %}
            {% if is_printing == "=1" %}        # fix for a weird superslicer bug
                {% set is_printing = "1" %}
            {% endif %}

            # reset any speed override
            M220 S100

            # park toolhead
            {% set zhop_retract = printer["gcode_macro RatOS"].toolhead_parking_zhop_retract|default(0.8)|float %}
            {% if is_printing == "1" %}
                _TOOLHEAD_PARKING_RETRACT R={zhop_retract}
                _TOOLHEAD_PARKING_Z_HOP
            {% endif %}
            PARK_TOOLHEAD

            # turn part cooling fans off
            {% set toolhead_count = printer["gcode_macro RatOS"].toolhead_count|int %}
            {% set act_fan_speed = printer["fan_generic fan_%s" % printer.toolhead.extruder].speed %}
            {% if fan_speed != -1 %}
                {% for i in range(toolhead_count) %}
                    SET_FAN_SPEED FAN=fan_extruder{'' if i==0 else i} SPEED=0
                {% endfor %}
                # Update core Klipper's fan speed to the fan speed of the active toolhead
                # Only do this if you have a sacrificial [fan] section
                M106.1 S0
            {% endif %}

            # activate extruder
            ACTIVATE_EXTRUDER EXTRUDER=extruder{'' if t==0 else t}
            
            # activate carriage
            {% set toolhead_carriage = printer["gcode_macro RatOS"].toolhead_carriage %}
            SET_DUAL_CARRIAGE CARRIAGE={toolhead_carriage[t]}

            # set offsets
            {% set force_offset = params.FORCE_OFFSET|default(false) %}
            {% if is_homing|lower == 'false' or force_offset|lower == 'true' %}
                {% if 'x' in printer.toolhead.homed_axes %}
                    {% if 'y' in printer.toolhead.homed_axes %}
                        {% if 'z' in printer.toolhead.homed_axes %}
                            _SET_OFFSET T={t}
                        {% endif %}
                    {% endif %}
                {% endif %}
            {% endif %}

            # set input shaper
            {% set shaper_x_freq = printer["gcode_macro RatOS"].toolhead_shaper_x_freq %}
            {% set shaper_y_freq = printer["gcode_macro RatOS"].toolhead_shaper_y_freq %}
            {% set shaper_x_type = printer["gcode_macro RatOS"].toolhead_shaper_x_type %}
            {% set shaper_y_type = printer["gcode_macro RatOS"].toolhead_shaper_y_type %}
            SET_INPUT_SHAPER SHAPER_FREQ_X={(shaper_x_freq[t]|float)} SHAPER_FREQ_Y={(shaper_y_freq[t]|float)} SHAPER_TYPE_X={(shaper_x_type[t]|lower)} SHAPER_TYPE_Y={(shaper_y_type[t]|lower)}

            # heat up extruder on demand
            {% if is_homing|lower == 'false' and is_printing == "1" %}
                {% if printer["gcode_macro RatOS"].toolhead_allow_on_demand|lower == 'true' %}
                    {% if printer["gcode_macro START_PRINT"].on_demand|lower == 'true' %}
                        M118 On demand extruder{'' if t==0 else t} heating...
                        {% set layer_number = printer["gcode_macro START_PRINT"].layer_number|int %}
                        {% set first_layer_temp = printer["gcode_macro START_PRINT"].first_layer_temp|float %}
                        {% set other_layer_temp = printer["gcode_macro START_PRINT"].other_layer_temp|float %}
                        {% set layer_temp = (first_layer_temp if layer_number<2 else other_layer_temp) %}
                        {% set target = printer['extruder%s' % ('' if t==0 else t)].target|int %}
                        {% if target == 0 %}
                            {% if target != layer_temp %}
                                _HEATING_EXTRUDERS TEMP={layer_temp} WAIT=true T={t} ALL_EXTRUDER=False
                                {% if layer_number < 5 %}
                                    {% if printer["gcode_macro RatOS"].nozzle_priming|lower == 'primeline' %}
                                        PRIME_LINE
                                    {% endif %}
                                    {% if printer["gcode_macro RatOS"].nozzle_priming|lower == 'primeblob' %}
                                        PRIME_BLOB
                                    {% endif %}
                                    SET_FAN_SPEED FAN=fan_extruder{'' if i==0 else i} SPEED=0
                                    PARK_TOOLHEAD
                                {% else %}
                                    _TOOLHEAD_PREEXTRUDE
                                {% endif %}
                            {% endif %}
                        {% endif %}
                    {% endif %}
                {% endif %}
            {% endif %}

            # preextrude 
            {% if is_printing == "1" %}
                _TOOLHEAD_PREEXTRUDE
            {% endif %}

            # turn part cooling fans on
            {% set sync_fans = printer["gcode_macro RatOS"].sync_fans|default(false)|lower == "true" %}
            {% if fan_speed != -1 %}
                {% for i in range(toolhead_count) %}
                    {% if i == t or sync_fans == true %}
                        SET_FAN_SPEED FAN=fan_extruder{'' if i==0 else i} SPEED={act_fan_speed}
                    {% endif %}
                {% endfor %}
                # Update core Klipper's fan speed to the fan speed of the active toolhead
                # Only do this if you have a sacrificial [fan] section
                M106.1 S{act_fan_speed}
            {% endif %}

            # set wipe tower acceleration
            {% set wipe_tower_acceleration = printer["gcode_macro RatOS"].toolhead_wipe_tower_acceleration %}
            {% if printer["gcode_macro START_PRINT"].wipe_tower|lower == 'true' %}
                SET_VELOCITY_LIMIT ACCEL={wipe_tower_acceleration[t]} ACCEL_TO_DECEL={(wipe_tower_acceleration[t]/2)}
            {% endif %}

            M400                                            # wait for movements
            G90                                             # absolute positioning

        {% endif %}
    {% endif %}


[gcode_macro _SET_OFFSET]
gcode:
    {% set t = params.T|int %}  
    {% set svv = printer.save_variables.variables %}
    {% if svv.applied_offset != t %}
        M118 Applying offset for T{t}
        {% if t==0 %}
            SET_GCODE_OFFSET X_ADJUST={svv.xoffset} Y_ADJUST={svv.yoffset}
            SET_GCODE_OFFSET Z_ADJUST={svv.zoffset} MOVE=1
        {% elif t==1 %}
            SET_GCODE_OFFSET X_ADJUST={(0-svv.xoffset)} Y_ADJUST={(0-svv.yoffset)}
            SET_GCODE_OFFSET Z_ADJUST={(0-svv.zoffset)} MOVE=1
        {% endif %}
        SAVE_VARIABLE VARIABLE=applied_offset VALUE={t}
        M400
    {% endif %}


[delayed_gcode _INIT_TOOLHEADS]
description: Makes sure we start the printer with the offsets from the default toolhead.
initial_duration: 0.1
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set default_toolhead = printer["gcode_macro RatOS"].toolhead_default|int %}
    SAVE_VARIABLE VARIABLE=applied_offset VALUE={default_toolhead}


#############################################################################################################
# 
# Toolhead Parking
# 
#############################################################################################################

[gcode_macro PARK_TOOLHEAD]
gcode:
    {% set speed = printer["gcode_macro RatOS"].toolhead_parking_speed %}
    {% set acceleration = printer["gcode_macro RatOS"].toolhead_parking_acceleration %}
    {% set toolhead_count = printer["gcode_macro RatOS"].toolhead_count|int %}
    {% set parking_offset = printer["gcode_macro RatOS"].toolhead_parking_offset %}

    # get current toolhead
    {% set ns = namespace(t=printer["gcode_macro RatOS"].toolhead_default|int) %}
    {% for i in range(toolhead_count) %}
        {% if printer.toolhead.extruder == ('extruder%s' % '' if i==0 else i) %}
            {% set ns.t = i %}
        {% endif %}
    {% endfor %}

    {% set home = printer["gcode_macro RatOS"].toolhead_home_x[ns.t] + parking_offset[ns.t] %}

    # park toolhead
    {% if 'x' in printer.toolhead.homed_axes %}
        SAVE_GCODE_STATE NAME=PARK_TOOLHEAD
        G90                                                             # absolute positioning
        SET_VELOCITY_LIMIT ACCEL={acceleration[ns.t]} ACCEL_TO_DECEL={(acceleration[ns.t]/2)}
        G1 X{home} F{(speed[ns.t]*60)}                                  # move to parking position
        SET_VELOCITY_LIMIT ACCEL={printer.toolhead.max_accel} ACCEL_TO_DECEL={(printer.toolhead.max_accel/2)}
        M400                                                            # wait for movements
        RESTORE_GCODE_STATE NAME=PARK_TOOLHEAD 
    {% endif %}


[gcode_macro _TOOLHEAD_PARKING_RETRACT]
variable_retracts: 1
gcode:
    {% set retract = params.R|default(0.8)|float %}
    {% set toolhead_count = printer["gcode_macro RatOS"].toolhead_count|int %}

    # get current toolhead
    {% set ns = namespace(t=printer["gcode_macro RatOS"].toolhead_default|int) %}
    {% for i in range(toolhead_count) %}
        {% if printer.toolhead.extruder == ('extruder%s' % '' if i==0 else i) %}
            {% set ns.t = i %}
        {% endif %}
    {% endfor %}

    # retract
    {% if retract > 0 %}
        {% if printer['extruder%s' % ('' if ns.t==0 else ns.t)].can_extrude|lower == 'true' %}
            M82                             # absolute extrusion
            G92 E0                          # reset extrusion distance
            G1 F600 E-{retract}             # retract
            G92 E0                          # reset extrusion distance
            _SET_EXTRUSION_MODE             # set extrusion mode based on user configuration
        {% endif %}
    {% endif %}


[gcode_macro _TOOLHEAD_PARKING_Z_HOP]
gcode:
    {% set zhop = printer["gcode_macro RatOS"].toolhead_parking_zhop|default(0.5)|float %}
    {% set speed = printer["gcode_macro RatOS"].toolhead_parking_zhop_speed|default(15)|float %}
    G91                         # relative positioning
    G1 Z+{zhop} F{speed * 60}   # z-hop
    G90                         # absolute positioning
    M400                        # wait for movements


[gcode_macro PARKING_CONFIG]
description: Configuration for the parking procedure.
gcode:
    SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=toolhead_parking_zhop VALUE={params.Z_HOP|default(1.0)|float}
    SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=toolhead_parking_zhop_speed VALUE={params.Z_SPEED|default(35)|float}
    SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=toolhead_parking_zhop_retract VALUE={params.RETRACT|default(0.8)|float}


# this fixes an issue with superslicer.
# only the currently active extruders temp got changed after the first layer.
# call this from the slicers change layer custom gcode 
[gcode_macro _LAYER_CHANGE]
gcode:
    {% set layer_number = printer["gcode_macro START_PRINT"].layer_number|int %}
    M118 layer number {layer_number}
    {% if layer_number == 2 %}
        {% set t = printer["gcode_macro START_PRINT"].t|int %}
        {% set other_layer_temp = printer["gcode_macro START_PRINT"].other_layer_temp|float %}
        {% set total_toolchanges = printer["gcode_macro START_PRINT"].total_toolchanges|int %}
        _HEATING_EXTRUDERS TEMP={other_layer_temp} T={t} ALL_EXTRUDER={total_toolchanges>0}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=layer_number VALUE={layer_number + 1}


#############################################################################################################
# 
# Toolhead Preextrude
# 
# preextrudes some filament before going back to the print job
#############################################################################################################

[gcode_macro _TOOLHEAD_PREEXTRUDE]
description: Preextrudes a amount of filament before going back to the print job.
gcode:
    {% set offset = printer["gcode_macro RatOS"].toolhead_parking_preextrude_offset %}
    {% set speed = printer["gcode_macro RatOS"].toolhead_parking_speed %}
    {% set acceleration = printer["gcode_macro RatOS"].toolhead_parking_acceleration %}
    {% set extrude = printer["gcode_macro RatOS"].toolhead_parking_preextrude %}
    {% set feedrate = printer["gcode_macro RatOS"].toolhead_parking_preextrude_feedrate|int %}
    {% set preextrude_retract = printer["gcode_macro RatOS"].toolhead_parking_preextrude_retract|default(0.2)|float %}
    {% set toolhead_count = printer["gcode_macro RatOS"].toolhead_count|int %}

    # get current toolhead
    {% set ns = namespace(t=printer["gcode_macro RatOS"].toolhead_default|int) %}
    {% for i in range(toolhead_count) %}
        {% if printer.toolhead.extruder == ('extruder%s' % '' if i==0 else i) %}
            {% set ns.t = i %}
        {% endif %}
    {% endfor %}

    {% set home = printer["gcode_macro RatOS"].toolhead_home_x[ns.t] + printer["gcode_macro RatOS"].toolhead_parking_offset[ns.t] %}

    # preextrude
    {% if extrude > 0 %}
        {% if printer['extruder%s' % ('' if ns.t==0 else ns.t)].can_extrude|lower == 'true' %}

            # reset speed override from purge tower
            M220 S100

            # move
            M400                                        # wait for movements
            G90                                         # absolute positioning
            SET_VELOCITY_LIMIT ACCEL={acceleration[ns.t]} ACCEL_TO_DECEL={(acceleration[ns.t]/2)}
            G1 X{(home + offset[ns.t])} F{(speed[ns.t]*60)}   # move
            SET_VELOCITY_LIMIT ACCEL={printer.toolhead.max_accel} ACCEL_TO_DECEL={(printer.toolhead.max_accel/2)}

            # extrude
            M400                                                # wait for movements
            M82                                                 # absolute extrusion
            G92 E0                                              # reset extrusion distance
            G1 F{feedrate} E{extrude}                           # extrude
            G92 E0                                              # reset extrusion distance
            {% if preextrude_retract > 0 %}
                G1 F{feedrate} E-{preextrude_retract}           # retract
                G92 E0                                          # reset extrusion distance
            {% endif %}
            _SET_EXTRUSION_MODE                                 # set extrusion mode based on user configuration
            M400                                                # wait for movements

        {% endif %}
    {% endif %}


[gcode_macro PREEXTRUDE_CONFIG]
description: Configuration for the preextrusion, before the toolhead moves back to the print job.
gcode:
    SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=toolhead_parking_preextrude VALUE={params.EXTRUDE|default(5.0)|float}
    SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=toolhead_parking_preextrude_retract VALUE={params.RETRACT_AFTER|default(0.2)|float}
    SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=toolhead_parking_preextrude_feedrate VALUE={params.FEEDRATE|default(600)|int}


#############################################################################################################
# 
# Toolhead Fan Control
# 
#############################################################################################################

[gcode_macro M106]
# Only rename_existing if you have a sacrificial [fan] section
rename_existing: M106.1
# The variable that controls fan speed swopping if not specifying P parameter
# -1 means the control is disabled, a value of 0-1 is the requested fan speed.
# Access via {printer["gcode_macro M106"].swap_speed}
variable_swap_speed: -1
gcode:
    {% set toolhead_count = printer["gcode_macro RatOS"].toolhead_count|int %}
    {% set sync_fans = printer["gcode_macro RatOS"].sync_fans|default(false)|lower == "true" %}

    {% set s = [[params.S|default(255)|int, 255]|min, 0]|max %}
    {% set p = params.P|default(-1)|int %}
    {% set speed = s / 255 %}

    # Set speed to -1 by default
    SET_GCODE_VARIABLE MACRO=M106 VARIABLE=swap_speed VALUE=-1

    {% if p == -1 %}
        # Set current active extruder fan
        {% if speed == 0 %}
            # Always turn off al fans if S0 is specified without a specific fan
            {% for i in range(toolhead_count) %}
                SET_FAN_SPEED FAN=fan_extruder{'' if i==0 else i} SPEED={speed}
            {% endfor %}
        {% else %}
            # Opt into fan speed swop control
            SET_GCODE_VARIABLE MACRO=M106 VARIABLE=swap_speed VALUE={speed}
            SET_FAN_SPEED FAN=fan_{printer.toolhead.extruder} SPEED={speed}
        {% endif %}
    {% else %}
        # Set specified active extruder fan
        {% for i in range(toolhead_count) %}
            SET_FAN_SPEED FAN=fan_extruder{'' if i==0 else i} SPEED={speed if i == p or sync_fans == true else 0}
        {% endfor %}
    {% endif %}

    # Update core Klipper's fan speed
    # Only do this if you have a sacrificial [fan] section
    M106.1 S{s}


[gcode_macro M107]
rename_existing: M107.1
gcode:
    {% set p = params.P|default(-1)|int %}
    M106 S0 P{p}
    

#############################################################################################################
# 
# Extruders
# 
#############################################################################################################

[gcode_macro _HEATING_EXTRUDERS]
gcode:
    {% set t = params.T|int %}
    {% set temp = params.TEMP|int %}
    {% set wait = params.WAIT|default(false)|lower %}
    {% set preheat = params.PREHEAT|default(false)|lower %}
    {% set all_extruder = params.ALL_EXTRUDER|default(false)|lower %}
    {% set toolhead_count = printer["gcode_macro RatOS"].toolhead_count|int %}
    {% set toolhead_preheat = printer["gcode_macro RatOS"].toolhead_start_print_preheat %}

    # set extruder temp
    {% for i in range(toolhead_count) %}
        {% if t == i or all_extruder == 'true' or (preheat == "true" and toolhead_preheat[0] == 1) %}
            M118 Heating extruder{'' if i==0 else i}...
            SET_HEATER_TEMPERATURE HEATER=extruder{'' if i==0 else i} TARGET={temp}
        {% endif %}
    {% endfor %}

    # wait for extruder temp
    {% if wait == "true" %}
        {% for i in range(toolhead_count) %}
            {% if t == i or all_extruder == 'true' or (preheat == "true" and toolhead_preheat[0] == 1) %}
                M118 Waiting for extruder{'' if i==0 else i}...
                TEMPERATURE_WAIT SENSOR=extruder{'' if i==0 else i} MINIMUM={temp}
            {% endif %}
        {% endfor %}
    {% endif %}


[gcode_macro _SYNC_EXTRUDERS]
gcode:
    {% set motion_queue = params.MOTION_QUEUE|default('extruder') %}
    {% set toolhead_count = printer["gcode_macro RatOS"].toolhead_count|int %}
    {% for i in range(toolhead_count) %}
        {% if motion_queue != ('extruder%s' % '' if i==0 else i) %}
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder{'' if i==0 else i} MOTION_QUEUE={motion_queue}
        {% endif %}
    {% endfor %}
    {% if motion_queue == '' %}
        {% for i in range(toolhead_count) %}
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder{'' if i==0 else i} MOTION_QUEUE=extruder{'' if i==0 else i}
        {% endfor %}
    {% endif %}


#############################################################################################################
# 
# Idex Calibration Macros
# 
#############################################################################################################

# Configure this to draw 2 line segments perpendicular to the dual_carraige axis
# that meet in the middle of the bed. Both lines should have the same coordinate
# on the axis of the dual_carraige. If they don't print inline, adjust your endstop
# settings.
[gcode_macro set_separation]
gcode:
    {% set svv = printer.save_variables.variables %}

    {% set oldX = svv.xoffset|float %}
    {% set oldY = svv.yoffset|float %}
    {% set oldZ = svv.zoffset|float %}

    {% if params.X is defined %}
        SAVE_VARIABLE VARIABLE=xoffset VALUE={ params.X|float }
    {% endif %}

    {% if params.Y is defined %}
        SAVE_VARIABLE VARIABLE=yoffset VALUE={ params.Y|float }
    {% endif %}

    {% if params.Z is defined %}
        SAVE_VARIABLE VARIABLE=zoffset VALUE={ params.Z|float }
    {% endif %}

    {% if params.X_ADJUST is defined %}
        {% set newX = params.X_ADJUST|float + oldX %}
        SAVE_VARIABLE VARIABLE=xoffset VALUE={ newX|float }
    {% endif %}

    {% if params.Y_ADJUST is defined %}
        {% set newY = params.Y_ADJUST|float + oldY %}
        SAVE_VARIABLE VARIABLE=yoffset VALUE={ newY|float }
    {% endif %}

    {% if params.Z_ADJUST is defined %}
        {% set newZ = params.Z_ADJUST|float + oldZ %}
        SAVE_VARIABLE VARIABLE=yoffset VALUE={ newZ|float }
    {% endif %}


[gcode_macro calibrate_separation]
gcode:
    {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}

    MAYBE_HOME
    G90
    M83

    _T T=1
    PRIME_BLOB
    G1 Z2 F6000
    G1 X150 Y148 F{speed}
    G1 Z.3 F4800
    G1 Y100 E3 F500
    G1 Z2 F6000
    G1 X148 Y150 F{speed}
    G1 Z.3 F4800
    G1 X100 E3 F500

    _T T=0
    PRIME_BLOB
    G1 Z2 F6000
    G1 X150 Y152 F{speed}
    G1 Z.3 F4800
    G1 Y200 E3 F500
    G1 Z2 F6000
    G1 X152 Y150 F{speed}
    G1 Z.3 F4800
    G1 X200 E3 F500

    _SET_EXTRUSION_MODE
    _T T={printer["gcode_macro RatOS"].toolhead_default|int}
